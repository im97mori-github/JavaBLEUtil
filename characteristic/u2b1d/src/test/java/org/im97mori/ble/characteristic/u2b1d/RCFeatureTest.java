package org.im97mori.ble.characteristic.u2b1d;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

@SuppressWarnings({ "unused" })
public class RCFeatureTest {

    //@formatter:off
    private static final byte[] data_00001;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00001 = data;
    }

    private static final byte[] data_00002;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = (byte) 0xff;
        data[ 1] = (byte) 0xff;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00002 = data;
    }

    private static final byte[] data_00101;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00101 = data;
    }

    private static final byte[] data_00102;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00102 = data;
    }

    private static final byte[] data_00201;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00201 = data;
    }

    private static final byte[] data_00202;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00202 = data;
    }

    private static final byte[] data_00301;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00301 = data;
    }

    private static final byte[] data_00302;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00302 = data;
    }

    private static final byte[] data_00401;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00401 = data;
    }

    private static final byte[] data_00402;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00402 = data;
    }

    private static final byte[] data_00501;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00501 = data;
    }

    private static final byte[] data_00502;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00502 = data;
    }

    private static final byte[] data_00601;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00601 = data;
    }

    private static final byte[] data_00602;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00602 = data;
    }

    private static final byte[] data_00701;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00701 = data;
    }

    private static final byte[] data_00702;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00702 = data;
    }

    private static final byte[] data_00801;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00801 = data;
    }

    private static final byte[] data_00802;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00802 = data;
    }

    private static final byte[] data_00901;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00901 = data;
    }

    private static final byte[] data_00902;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_00902 = data;
    }

    private static final byte[] data_01001;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01001 = data;
    }

    private static final byte[] data_01002;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01002 = data;
    }

    private static final byte[] data_01101;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01101 = data;
    }

    private static final byte[] data_01102;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01102 = data;
    }

    private static final byte[] data_01201;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01201 = data;
    }

    private static final byte[] data_01202;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01202 = data;
    }

    private static final byte[] data_01301;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01301 = data;
    }

    private static final byte[] data_01302;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01302 = data;
    }

    private static final byte[] data_01401;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01401 = data;
    }

    private static final byte[] data_01402;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01402 = data;
    }

    private static final byte[] data_01501;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01501 = data;
    }

    private static final byte[] data_01502;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01502 = data;
    }

    private static final byte[] data_01601;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01601 = data;
    }

    private static final byte[] data_01602;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01602 = data;
    }

    private static final byte[] data_01701;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01701 = data;
    }

    private static final byte[] data_01702;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_TRUE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01702 = data;
    }

    private static final byte[] data_01801;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01801 = data;
    }

    private static final byte[] data_01802;
    static {
        byte[] data = new byte[5];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_TRUE;
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data_01802 = data;
    }

    private static final byte[] data_01901;
    static {
        byte[] data = new byte[6];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE
                | (RCFeature.RC_FEATURES_FEATURE_EXTENSION_BIT << 16);
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data[ 5] = (byte) (flags >> 24);
        data_01901 = data;
    }

    private static final byte[] data_01902;
    static {
        byte[] data = new byte[7];
        int flags = RCFeature.RC_FEATURES_E2E_CRC_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ENABLE_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_READY_FOR_DISCONNECT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_RECONNECTION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_CONNECTION_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SLAVE_LATENCY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_SUPERVISION_TIMEOUT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_INTERVAL_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_COUNT_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_PROPOSE_ADVERTISEMENT_REPETITION_TIME_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_1_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_2_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_3_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_ADVERTISEMENT_CONFIGURATION_4_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_UPGRADE_TO_LESC_ONLY_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_NEXT_PAIRING_OOB_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_USE_OF_WHILE_LIST_SUPPORTED_FALSE
                | RCFeature.RC_FEATURES_LIMITED_ACCESS_SUPPORTED_FALSE
                | (RCFeature.RC_FEATURES_FEATURE_EXTENSION_BIT << 16)
                | (RCFeature.RC_FEATURES_FEATURE_EXTENSION_BIT << 24);
        data[ 0] = 0x01;
        data[ 1] = 0x02;
        data[ 2] = (byte) flags;
        data[ 3] = (byte) (flags >> 8);
        data[ 4] = (byte) (flags >> 16);
        data[ 5] = (byte) (flags >> 24);
        data[ 6] = (byte) (flags >> 32);
        data_01902 = data;
    }
    //@formatter:on

    private byte[] getData() {
        int index = -1;
        byte[] data = null;

        StackTraceElement[] stackTraceElementArray = Thread.currentThread().getStackTrace();
        for (int i = 0; i < stackTraceElementArray.length; i++) {
            StackTraceElement stackTraceElement = stackTraceElementArray[i];
            if ("getData".equals(stackTraceElement.getMethodName())) {
                index = i + 1;
                break;
            }
        }
        if (index >= 0 && index < stackTraceElementArray.length) {
            StackTraceElement stackTraceElement = stackTraceElementArray[index];
            String[] splitted = stackTraceElement.getMethodName().split("_");
            try {
                data = (byte[]) this.getClass().getDeclaredField("data_" + splitted[splitted.length - 1]).get(null);
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
        return data;
    }

    @Test
    public void test_constructor_00001() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertFalse(result1.isE2eCrcNotSupported());
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
    }

    @Test
    public void test_constructor_00002() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertTrue(result1.isE2eCrcNotSupported());
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
    }

    @Test
    public void test_constructor_00101() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesE2eCrcNotSupported());
        assertFalse(result1.isRcFeaturesE2eCrcSupported());
    }

    @Test
    public void test_constructor_00102() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesE2eCrcNotSupported());
        assertTrue(result1.isRcFeaturesE2eCrcSupported());
    }

    @Test
    public void test_constructor_00201() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesEnableDisconnectNotSupported());
        assertFalse(result1.isRcFeaturesEnableDisconnectSupported());
    }

    @Test
    public void test_constructor_00202() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesEnableDisconnectNotSupported());
        assertTrue(result1.isRcFeaturesEnableDisconnectSupported());
    }

    @Test
    public void test_constructor_00301() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesReadyForDisconnectNotSupported());
        assertFalse(result1.isRcFeaturesReadyForDisconnectSupported());
    }

    @Test
    public void test_constructor_00302() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesReadyForDisconnectNotSupported());
        assertTrue(result1.isRcFeaturesReadyForDisconnectSupported());
    }

    @Test
    public void test_constructor_00401() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeReconnectionTimeoutNotSupported());
        assertFalse(result1.isRcFeaturesProposeReconnectionTimeoutSupported());
    }

    @Test
    public void test_constructor_00402() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeReconnectionTimeoutNotSupported());
        assertTrue(result1.isRcFeaturesProposeReconnectionTimeoutSupported());
    }

    @Test
    public void test_constructor_00501() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeConnectionIntervalNotSupported());
        assertFalse(result1.isRcFeaturesProposeConnectionIntervalSupported());
    }

    @Test
    public void test_constructor_00502() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeConnectionIntervalNotSupported());
        assertTrue(result1.isRcFeaturesProposeConnectionIntervalSupported());
    }

    @Test
    public void test_constructor_00601() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeSlaveLatencyNotSupported());
        assertFalse(result1.isRcFeaturesProposeSlaveLatencySupported());
    }

    @Test
    public void test_constructor_00602() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeSlaveLatencyNotSupported());
        assertTrue(result1.isRcFeaturesProposeSlaveLatencySupported());
    }

    @Test
    public void test_constructor_00701() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeSupervisionTimeoutNotSupported());
        assertFalse(result1.isRcFeaturesProposeSupervisionTimeoutSupported());
    }

    @Test
    public void test_constructor_00702() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeSupervisionTimeoutNotSupported());
        assertTrue(result1.isRcFeaturesProposeSupervisionTimeoutSupported());
    }

    @Test
    public void test_constructor_00801() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeAdvertisementIntervalNotSupported());
        assertFalse(result1.isRcFeaturesProposeAdvertisementIntervalSupported());
    }

    @Test
    public void test_constructor_00802() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeAdvertisementIntervalNotSupported());
        assertTrue(result1.isRcFeaturesProposeAdvertisementIntervalSupported());
    }

    @Test
    public void test_constructor_00901() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeAdvertisementCountNotSupported());
        assertFalse(result1.isRcFeaturesProposeAdvertisementCountSupported());
    }

    @Test
    public void test_constructor_00902() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeAdvertisementCountNotSupported());
        assertTrue(result1.isRcFeaturesProposeAdvertisementCountSupported());
    }

    @Test
    public void test_constructor_01001() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesProposeAdvertisementRepetitionTimeNotSupported());
        assertFalse(result1.isRcFeaturesProposeAdvertisementRepetitionTimeSupported());
    }

    @Test
    public void test_constructor_01002() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesProposeAdvertisementRepetitionTimeNotSupported());
        assertTrue(result1.isRcFeaturesProposeAdvertisementRepetitionTimeSupported());
    }

    @Test
    public void test_constructor_01101() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration1NotSupported());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration1Supported());
    }

    @Test
    public void test_constructor_01102() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration1NotSupported());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration1Supported());
    }

    @Test
    public void test_constructor_01201() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration2NotSupported());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration2Supported());
    }

    @Test
    public void test_constructor_01202() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration2NotSupported());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration2Supported());
    }

    @Test
    public void test_constructor_01301() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration3NotSupported());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration3Supported());
    }

    @Test
    public void test_constructor_01302() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration3NotSupported());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration3Supported());
    }

    @Test
    public void test_constructor_01401() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration4NotSupported());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration4Supported());
    }

    @Test
    public void test_constructor_01402() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesAdvertisementConfiguration4NotSupported());
        assertTrue(result1.isRcFeaturesAdvertisementConfiguration4Supported());
    }

    @Test
    public void test_constructor_01501() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesUpgradeToLescOnlyNotSupported());
        assertFalse(result1.isRcFeaturesUpgradeToLescOnlySupported());
    }

    @Test
    public void test_constructor_01502() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesUpgradeToLescOnlyNotSupported());
        assertTrue(result1.isRcFeaturesUpgradeToLescOnlySupported());
    }

    @Test
    public void test_constructor_01601() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesNextPairingOobNotSupported());
        assertFalse(result1.isRcFeaturesNextPairingOobSupported());
    }

    @Test
    public void test_constructor_01602() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesNextPairingOobNotSupported());
        assertTrue(result1.isRcFeaturesNextPairingOobSupported());
    }

    @Test
    public void test_constructor_01701() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesUseOfWhiteListNotSupported());
        assertFalse(result1.isRcFeaturesUseOfWhiteListSupported());
    }

    @Test
    public void test_constructor_01702() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesUseOfWhiteListNotSupported());
        assertTrue(result1.isRcFeaturesUseOfWhiteListSupported());
    }

    @Test
    public void test_constructor_01801() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertTrue(result1.isRcFeaturesLimitedAccessNotSupported());
        assertFalse(result1.isRcFeaturesLimitedAccessSupported());
    }

    @Test
    public void test_constructor_01802() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 5), result1.getRcFeatures());
        assertFalse(result1.isRcFeaturesLimitedAccessNotSupported());
        assertTrue(result1.isRcFeaturesLimitedAccessSupported());
    }

    @Test
    public void test_constructor_01901() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 6), result1.getRcFeatures());
    }

    @Test
    public void test_constructor_01902() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(Arrays.copyOfRange(data, 2, 7), result1.getRcFeatures());
    }

    @Test
    public void test_parcelable_2_00001() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00002() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00101() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00102() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00201() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00202() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00301() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00302() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00401() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00402() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00501() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00502() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00601() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00602() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00701() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00702() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00801() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00802() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00901() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_00902() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01001() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01002() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01101() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01102() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01201() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01202() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01301() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01302() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01401() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01402() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01501() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01502() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01601() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01602() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01701() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01702() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01801() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01802() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01901() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

    @Test
    public void test_parcelable_2_01902() {
        byte[] data = getData();

        RCFeature result1 = new RCFeature(data);
        assertArrayEquals(data, result1.getBytes());
    }

}
