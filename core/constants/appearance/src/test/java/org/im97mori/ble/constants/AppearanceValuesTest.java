package org.im97mori.ble.constants;

import static org.im97mori.ble.constants.AppearanceValues.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.im97mori.ble.test.TestBase;
import org.junit.Test;

public class AppearanceValuesTest extends TestBase {

	@Test
	public void test_map_00001() {
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(UNKNOWN_APPEARANCE_CATEGORY));
		assertEquals("Unknown", APPEARANCE_CATEGORY_MAPPING.get(UNKNOWN_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(PHONE_APPEARANCE_CATEGORY));
		assertEquals("Phone", APPEARANCE_CATEGORY_MAPPING.get(PHONE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(COMPUTER_APPEARANCE_CATEGORY));
		assertEquals("Computer", APPEARANCE_CATEGORY_MAPPING.get(COMPUTER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(WATCH_APPEARANCE_CATEGORY));
		assertEquals("Watch", APPEARANCE_CATEGORY_MAPPING.get(WATCH_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(CLOCK_APPEARANCE_CATEGORY));
		assertEquals("Clock", APPEARANCE_CATEGORY_MAPPING.get(CLOCK_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(DISPLAY_APPEARANCE_CATEGORY));
		assertEquals("Display", APPEARANCE_CATEGORY_MAPPING.get(DISPLAY_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(REMOTE_CONTROL_APPEARANCE_CATEGORY));
		assertEquals("Remote Control", APPEARANCE_CATEGORY_MAPPING.get(REMOTE_CONTROL_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(EYE_GLASSES_APPEARANCE_CATEGORY));
		assertEquals("Eye-glasses", APPEARANCE_CATEGORY_MAPPING.get(EYE_GLASSES_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(TAG_APPEARANCE_CATEGORY));
		assertEquals("Tag", APPEARANCE_CATEGORY_MAPPING.get(TAG_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(KEYRING_APPEARANCE_CATEGORY));
		assertEquals("Keyring", APPEARANCE_CATEGORY_MAPPING.get(KEYRING_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(MEDIA_PLAYER_APPEARANCE_CATEGORY));
		assertEquals("Media Player", APPEARANCE_CATEGORY_MAPPING.get(MEDIA_PLAYER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(BARCODE_SCANNER_APPEARANCE_CATEGORY));
		assertEquals("Barcode Scanner", APPEARANCE_CATEGORY_MAPPING.get(BARCODE_SCANNER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(THERMOMETER_APPEARANCE_CATEGORY));
		assertEquals("Thermometer", APPEARANCE_CATEGORY_MAPPING.get(THERMOMETER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(HEART_RATE_SENSOR_APPEARANCE_CATEGORY));
		assertEquals("Heart Rate Sensor", APPEARANCE_CATEGORY_MAPPING.get(HEART_RATE_SENSOR_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(BLOOD_PRESSURE_APPEARANCE_CATEGORY));
		assertEquals("Blood Pressure", APPEARANCE_CATEGORY_MAPPING.get(BLOOD_PRESSURE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(HUMAN_INTERFACE_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Human Interface Device",
				APPEARANCE_CATEGORY_MAPPING.get(HUMAN_INTERFACE_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(GLUCOSE_METER_APPEARANCE_CATEGORY));
		assertEquals("Glucose Meter", APPEARANCE_CATEGORY_MAPPING.get(GLUCOSE_METER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(RUNNING_WALKING_SENSOR_APPEARANCE_CATEGORY));
		assertEquals("Running Walking Sensor",
				APPEARANCE_CATEGORY_MAPPING.get(RUNNING_WALKING_SENSOR_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(CYCLING_APPEARANCE_CATEGORY));
		assertEquals("Cycling", APPEARANCE_CATEGORY_MAPPING.get(CYCLING_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(CONTROL_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Control Device", APPEARANCE_CATEGORY_MAPPING.get(CONTROL_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(NETWORK_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Network Device", APPEARANCE_CATEGORY_MAPPING.get(NETWORK_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(SENSOR_APPEARANCE_CATEGORY));
		assertEquals("Sensor", APPEARANCE_CATEGORY_MAPPING.get(SENSOR_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(LIGHT_FIXTURES_APPEARANCE_CATEGORY));
		assertEquals("Light Fixtures", APPEARANCE_CATEGORY_MAPPING.get(LIGHT_FIXTURES_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(FAN_APPEARANCE_CATEGORY));
		assertEquals("Fan", APPEARANCE_CATEGORY_MAPPING.get(FAN_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(HVAC_APPEARANCE_CATEGORY));
		assertEquals("HVAC", APPEARANCE_CATEGORY_MAPPING.get(HVAC_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(AIR_CONDITIONING_APPEARANCE_CATEGORY));
		assertEquals("Air Conditioning", APPEARANCE_CATEGORY_MAPPING.get(AIR_CONDITIONING_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(HUMIDIFIER_APPEARANCE_CATEGORY));
		assertEquals("Humidifier", APPEARANCE_CATEGORY_MAPPING.get(HUMIDIFIER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(HEATING_APPEARANCE_CATEGORY));
		assertEquals("Heating", APPEARANCE_CATEGORY_MAPPING.get(HEATING_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(ACCESS_CONTROL_APPEARANCE_CATEGORY));
		assertEquals("Access Control", APPEARANCE_CATEGORY_MAPPING.get(ACCESS_CONTROL_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(MOTORIZED_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Motorized Device", APPEARANCE_CATEGORY_MAPPING.get(MOTORIZED_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(POWER_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Power Device", APPEARANCE_CATEGORY_MAPPING.get(POWER_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(LIGHT_SOURCE_APPEARANCE_CATEGORY));
		assertEquals("Light Source", APPEARANCE_CATEGORY_MAPPING.get(LIGHT_SOURCE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(WINDOW_COVERING_APPEARANCE_CATEGORY));
		assertEquals("Window Covering", APPEARANCE_CATEGORY_MAPPING.get(WINDOW_COVERING_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(AUDIO_SINK_APPEARANCE_CATEGORY));
		assertEquals("Audio Sink", APPEARANCE_CATEGORY_MAPPING.get(AUDIO_SINK_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(AUDIO_SOURCE_APPEARANCE_CATEGORY));
		assertEquals("Audio Source", APPEARANCE_CATEGORY_MAPPING.get(AUDIO_SOURCE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(MOTORIZED_VEHICLE_APPEARANCE_CATEGORY));
		assertEquals("Motorized Vehicle", APPEARANCE_CATEGORY_MAPPING.get(MOTORIZED_VEHICLE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(DOMESTIC_APPLIANCE_APPEARANCE_CATEGORY));
		assertEquals("Domestic Appliance", APPEARANCE_CATEGORY_MAPPING.get(DOMESTIC_APPLIANCE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(WEARABLE_AUDIO_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Wearable Audio Device",
				APPEARANCE_CATEGORY_MAPPING.get(WEARABLE_AUDIO_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(AIRCRAFT_APPEARANCE_CATEGORY));
		assertEquals("Aircraft", APPEARANCE_CATEGORY_MAPPING.get(AIRCRAFT_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(AV_EQUIPMENT_APPEARANCE_CATEGORY));
		assertEquals("AV Equipment", APPEARANCE_CATEGORY_MAPPING.get(AV_EQUIPMENT_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(DISPLAY_EQUIPMENT_APPEARANCE_CATEGORY));
		assertEquals("Display Equipment", APPEARANCE_CATEGORY_MAPPING.get(DISPLAY_EQUIPMENT_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(HEARING_AID_APPEARANCE_CATEGORY));
		assertEquals("Hearing aid", APPEARANCE_CATEGORY_MAPPING.get(HEARING_AID_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(GAMING_APPEARANCE_CATEGORY));
		assertEquals("Gaming", APPEARANCE_CATEGORY_MAPPING.get(GAMING_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(PULSE_OXIMETER_APPEARANCE_CATEGORY));
		assertEquals("Pulse Oximeter", APPEARANCE_CATEGORY_MAPPING.get(PULSE_OXIMETER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(WEIGHT_SCALE_APPEARANCE_CATEGORY));
		assertEquals("Weight Scale", APPEARANCE_CATEGORY_MAPPING.get(WEIGHT_SCALE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(PERSONAL_MOBILITY_DEVICE_APPEARANCE_CATEGORY));
		assertEquals("Personal Mobility Device",
				APPEARANCE_CATEGORY_MAPPING.get(PERSONAL_MOBILITY_DEVICE_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(CONTINUOUS_GLUCOSE_MONITOR_APPEARANCE_CATEGORY));
		assertEquals("Continuous Glucose Monitor",
				APPEARANCE_CATEGORY_MAPPING.get(CONTINUOUS_GLUCOSE_MONITOR_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(INSULIN_PUMP_APPEARANCE_CATEGORY));
		assertEquals("Insulin Pump", APPEARANCE_CATEGORY_MAPPING.get(INSULIN_PUMP_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(MEDICATION_DELIVERY_APPEARANCE_CATEGORY));
		assertEquals("Medication Delivery", APPEARANCE_CATEGORY_MAPPING.get(MEDICATION_DELIVERY_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(SPIROMETER_APPEARANCE_CATEGORY));
		assertEquals("Spirometer", APPEARANCE_CATEGORY_MAPPING.get(SPIROMETER_APPEARANCE_CATEGORY));
		assertTrue(APPEARANCE_CATEGORY_MAPPING.containsKey(OUTDOOR_SPORTS_ACTIVITY_APPEARANCE_CATEGORY));
		assertEquals("Outdoor Sports Activity",
				APPEARANCE_CATEGORY_MAPPING.get(OUTDOOR_SPORTS_ACTIVITY_APPEARANCE_CATEGORY));
	}

	@Test
	public void test_map_00002() {
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_UNKNOWN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Unknown", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_UNKNOWN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_PHONE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Phone", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_PHONE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_COMPUTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Computer", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_COMPUTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DESKTOP_WORKSTATION_APPEARANCE_SUB_CATEGORY));
		assertEquals("Desktop Workstation",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(DESKTOP_WORKSTATION_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SERVER_CLASS_COMPUTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Server-class Computer",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(SERVER_CLASS_COMPUTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LAPTOP_APPEARANCE_SUB_CATEGORY));
		assertEquals("Laptop", APPEARANCE_SUB_CATEGORY_MAPPING.get(LAPTOP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HANDHELD_PC_PDA_CLAMSHELL_APPEARANCE_SUB_CATEGORY));
		assertEquals("Handheld PC/PDA (clamshell)",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(HANDHELD_PC_PDA_CLAMSHELL_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PALM_SIZE_PC_PDA_APPEARANCE_SUB_CATEGORY));
		assertEquals("Palm-size PC/PDA", APPEARANCE_SUB_CATEGORY_MAPPING.get(PALM_SIZE_PC_PDA_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WEARABLECOMPUTER_WATCH_SIZE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wearable computer (watch size)",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(WEARABLECOMPUTER_WATCH_SIZE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TABLET_APPEARANCE_SUB_CATEGORY));
		assertEquals("Tablet", APPEARANCE_SUB_CATEGORY_MAPPING.get(TABLET_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DOCKING_STATION_APPEARANCE_SUB_CATEGORY));
		assertEquals("Docking Station", APPEARANCE_SUB_CATEGORY_MAPPING.get(DOCKING_STATION_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ALL_IN_ONE_APPEARANCE_SUB_CATEGORY));
		assertEquals("All in One", APPEARANCE_SUB_CATEGORY_MAPPING.get(ALL_IN_ONE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BLADE_SERVER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Blade Server", APPEARANCE_SUB_CATEGORY_MAPPING.get(BLADE_SERVER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CONVERTIBLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Convertible", APPEARANCE_SUB_CATEGORY_MAPPING.get(CONVERTIBLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DETACHABLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Detachable", APPEARANCE_SUB_CATEGORY_MAPPING.get(DETACHABLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(IOT_GATEWAY_APPEARANCE_SUB_CATEGORY));
		assertEquals("IoT Gateway", APPEARANCE_SUB_CATEGORY_MAPPING.get(IOT_GATEWAY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MINI_P_C_APPEARANCE_SUB_CATEGORY));
		assertEquals("Mini PC", APPEARANCE_SUB_CATEGORY_MAPPING.get(MINI_P_C_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(STICK_PC_APPEARANCE_SUB_CATEGORY));
		assertEquals("Stick PC", APPEARANCE_SUB_CATEGORY_MAPPING.get(STICK_PC_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_WATCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Watch", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_WATCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SPORTS_WATCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Sports Watch", APPEARANCE_SUB_CATEGORY_MAPPING.get(SPORTS_WATCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SMARTWATCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Smartwatch", APPEARANCE_SUB_CATEGORY_MAPPING.get(SMARTWATCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_CLOCK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Clock", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_CLOCK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_DISPLAY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Display", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_DISPLAY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_REMOTE_CONTROL_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Remote Control",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_REMOTE_CONTROL_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_EYE_GLASSES_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Eye-glasses",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_EYE_GLASSES_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_TAG_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Tag", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_TAG_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_KEYRING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Keyring", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_KEYRING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_MEDIA_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Media Player",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_MEDIA_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_BARCODE_SCANNER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Barcode Scanner",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_BARCODE_SCANNER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_THERMOMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Thermometer",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_THERMOMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EAR_THERMOMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Ear Thermometer", APPEARANCE_SUB_CATEGORY_MAPPING.get(EAR_THERMOMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_HEART_RATE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Heart Rate Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_HEART_RATE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HEART_RATE_BELT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Heart Rate Belt", APPEARANCE_SUB_CATEGORY_MAPPING.get(HEART_RATE_BELT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_BLOOD_PRESSURE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Blood Pressure",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_BLOOD_PRESSURE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ARM_BLOOD_PRESSURE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Arm Blood Pressure",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(ARM_BLOOD_PRESSURE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WRIST_BLOOD_PRESSURE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wrist Blood Pressure",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(WRIST_BLOOD_PRESSURE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_HUMAN_INTERFACE_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Human Interface Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_HUMAN_INTERFACE_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(KEYBOARD_APPEARANCE_SUB_CATEGORY));
		assertEquals("Keyboard", APPEARANCE_SUB_CATEGORY_MAPPING.get(KEYBOARD_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MOUSE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Mouse", APPEARANCE_SUB_CATEGORY_MAPPING.get(MOUSE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(JOYSTICK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Joystick", APPEARANCE_SUB_CATEGORY_MAPPING.get(JOYSTICK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GAMEPAD_APPEARANCE_SUB_CATEGORY));
		assertEquals("Gamepad", APPEARANCE_SUB_CATEGORY_MAPPING.get(GAMEPAD_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DIGITIZER_TABLET_APPEARANCE_SUB_CATEGORY));
		assertEquals("Digitizer Tablet", APPEARANCE_SUB_CATEGORY_MAPPING.get(DIGITIZER_TABLET_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CARD_READER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Card Reader", APPEARANCE_SUB_CATEGORY_MAPPING.get(CARD_READER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DIGITAL_PEN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Digital Pen", APPEARANCE_SUB_CATEGORY_MAPPING.get(DIGITAL_PEN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BARCODE_SCANNER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Barcode Scanner", APPEARANCE_SUB_CATEGORY_MAPPING.get(BARCODE_SCANNER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TOUCHPAD_APPEARANCE_SUB_CATEGORY));
		assertEquals("Touchpad", APPEARANCE_SUB_CATEGORY_MAPPING.get(TOUCHPAD_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PRESENTATION_REMOTE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Presentation Remote",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(PRESENTATION_REMOTE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_GLUCOSE_METER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Glucose Meter",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_GLUCOSE_METER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Running Walking Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(IN_SHOE_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("In-Shoe Running Walking Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(IN_SHOE_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ON_SHOE_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("On-Shoe Running Walking Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(ON_SHOE_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ON_HIP_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("On-Hip Running Walking Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(ON_HIP_RUNNING_WALKING_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_CYCLING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Cycling", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_CYCLING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CYCLING_COMPUTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Cycling Computer", APPEARANCE_SUB_CATEGORY_MAPPING.get(CYCLING_COMPUTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SPEED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Speed Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(SPEED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CADENCE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Cadence Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(CADENCE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POWER_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Power Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(POWER_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SPEED_AND_CADENCE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Speed and Cadence Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(SPEED_AND_CADENCE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_CONTROL_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Control Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_CONTROL_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MULTI_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Multi-switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(MULTI_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BUTTON_APPEARANCE_SUB_CATEGORY));
		assertEquals("Button", APPEARANCE_SUB_CATEGORY_MAPPING.get(BUTTON_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SLIDER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Slider", APPEARANCE_SUB_CATEGORY_MAPPING.get(SLIDER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ROTARY_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Rotary Switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(ROTARY_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TOUCH_PANEL_APPEARANCE_SUB_CATEGORY));
		assertEquals("Touch Panel", APPEARANCE_SUB_CATEGORY_MAPPING.get(TOUCH_PANEL_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SINGLE_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Single Switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(SINGLE_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DOUBLE_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Double Switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(DOUBLE_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TRIPLE_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Triple Switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(TRIPLE_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BATTERY_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Battery Switch", APPEARANCE_SUB_CATEGORY_MAPPING.get(BATTERY_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ENERGY_HARVESTING_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertEquals("Energy Harvesting Switch",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(ENERGY_HARVESTING_SWITCH_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PUSH_BUTTON_APPEARANCE_SUB_CATEGORY));
		assertEquals("Push Button", APPEARANCE_SUB_CATEGORY_MAPPING.get(PUSH_BUTTON_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_NETWORK_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Network Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_NETWORK_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ACCESS_POINT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Access Point", APPEARANCE_SUB_CATEGORY_MAPPING.get(ACCESS_POINT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MESH_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Mesh Device", APPEARANCE_SUB_CATEGORY_MAPPING.get(MESH_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MESH_NETWORK_PROXY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Mesh Network Proxy",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(MESH_NETWORK_PROXY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MOTION_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Motion Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(MOTION_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AIR_QUALITY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Air quality Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(AIR_QUALITY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TEMPERATURE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Temperature Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(TEMPERATURE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HUMIDITY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Humidity Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(HUMIDITY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LEAK_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Leak Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(LEAK_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SMOKE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Smoke Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(SMOKE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(OCCUPANCY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Occupancy Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(OCCUPANCY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CONTACT_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Contact Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(CONTACT_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CARBON_MONOXIDE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Carbon Monoxide Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(CARBON_MONOXIDE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CARBON_DIOXIDE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Carbon Dioxide Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(CARBON_DIOXIDE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AMBIENT_LIGHT_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Ambient Light Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(AMBIENT_LIGHT_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ENERGY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Energy Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(ENERGY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(COLOR_LIGHT_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Color Light Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(COLOR_LIGHT_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RAIN_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Rain Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(RAIN_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FIRE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Fire Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(FIRE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WIND_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wind Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(WIND_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PROXIMITY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Proximity Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(PROXIMITY_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MULTI_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Multi-Sensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(MULTI_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FLUSH_MOUNTED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Flush Mounted Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(FLUSH_MOUNTED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CEILING_MOUNTED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Ceiling Mounted Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(CEILING_MOUNTED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WALL_MOUNTED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wall Mounted Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(WALL_MOUNTED_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MULTISENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Multisensor", APPEARANCE_SUB_CATEGORY_MAPPING.get(MULTISENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ENERGY_METER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Energy Meter", APPEARANCE_SUB_CATEGORY_MAPPING.get(ENERGY_METER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FLAME_DETECTOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Flame Detector", APPEARANCE_SUB_CATEGORY_MAPPING.get(FLAME_DETECTOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(VEHICLE_TIRE_PRESSURE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Vehicle Tire Pressure Sensor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(VEHICLE_TIRE_PRESSURE_SENSOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_LIGHT_FIXTURES_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Light Fixtures",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_LIGHT_FIXTURES_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WALL_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wall Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(WALL_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CEILING_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Ceiling Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(CEILING_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FLOOR_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Floor Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(FLOOR_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CABINET_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Cabinet Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(CABINET_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DESK_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Desk Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(DESK_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TROFFER_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Troffer Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(TROFFER_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PENDANT_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Pendant Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(PENDANT_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(IN_GROUND_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("In-ground Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(IN_GROUND_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FLOOD_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Flood Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(FLOOD_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(UNDERWATER_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Underwater Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(UNDERWATER_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BOLLARD_WITH_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bollard with Light",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(BOLLARD_WITH_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PATHWAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Pathway Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(PATHWAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GARDEN_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Garden Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(GARDEN_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POLE_TOP_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Pole-top Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(POLE_TOP_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SPOTLIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Spotlight", APPEARANCE_SUB_CATEGORY_MAPPING.get(SPOTLIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LINEAR_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Linear Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(LINEAR_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(STREET_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Street Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(STREET_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SHELVES_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Shelves Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(SHELVES_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bay Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(BAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EMERGENCY_EXIT_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Emergency Exit Light",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(EMERGENCY_EXIT_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LIGHT_CONTROLLER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Light Controller", APPEARANCE_SUB_CATEGORY_MAPPING.get(LIGHT_CONTROLLER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LIGHT_DRIVER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Light Driver", APPEARANCE_SUB_CATEGORY_MAPPING.get(LIGHT_DRIVER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BULB_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bulb", APPEARANCE_SUB_CATEGORY_MAPPING.get(BULB_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOW_BAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Low-bay Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(LOW_BAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HIGH_BAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("High-bay Light", APPEARANCE_SUB_CATEGORY_MAPPING.get(HIGH_BAY_LIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CEILING_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Ceiling Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(CEILING_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AXIAL_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Axial Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(AXIAL_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EXHAUST_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Exhaust Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(EXHAUST_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PEDESTAL_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Pedestal Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(PEDESTAL_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DESK_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Desk Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(DESK_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WALL_FAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wall Fan", APPEARANCE_SUB_CATEGORY_MAPPING.get(WALL_FAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_HVAC_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic HVAC", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_HVAC_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(THERMOSTAT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Thermostat", APPEARANCE_SUB_CATEGORY_MAPPING.get(THERMOSTAT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HUMIDIFIER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Humidifier", APPEARANCE_SUB_CATEGORY_MAPPING.get(HUMIDIFIER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DE_HUMIDIFIER_APPEARANCE_SUB_CATEGORY));
		assertEquals("De-humidifier", APPEARANCE_SUB_CATEGORY_MAPPING.get(DE_HUMIDIFIER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HEATER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Heater", APPEARANCE_SUB_CATEGORY_MAPPING.get(HEATER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RADIATOR_0605_APPEARANCE_SUB_CATEGORY));
		assertEquals("Radiator", APPEARANCE_SUB_CATEGORY_MAPPING.get(RADIATOR_0605_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BOILER_0606_APPEARANCE_SUB_CATEGORY));
		assertEquals("Boiler", APPEARANCE_SUB_CATEGORY_MAPPING.get(BOILER_0606_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HEAT_PUMP_0607_APPEARANCE_SUB_CATEGORY));
		assertEquals("Heat Pump", APPEARANCE_SUB_CATEGORY_MAPPING.get(HEAT_PUMP_0607_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(INFRARED_HEATER_0608_APPEARANCE_SUB_CATEGORY));
		assertEquals("Infrared Heater",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(INFRARED_HEATER_0608_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RADIANT_PANEL_HEATER_0609_APPEARANCE_SUB_CATEGORY));
		assertEquals("Radiant Panel Heater",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(RADIANT_PANEL_HEATER_0609_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FAN_HEATER_060A_APPEARANCE_SUB_CATEGORY));
		assertEquals("Fan Heater", APPEARANCE_SUB_CATEGORY_MAPPING.get(FAN_HEATER_060A_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AIR_CURTAIN_060B_APPEARANCE_SUB_CATEGORY));
		assertEquals("Air Curtain", APPEARANCE_SUB_CATEGORY_MAPPING.get(AIR_CURTAIN_060B_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_AIR_CONDITIONING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Air Conditioning",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_AIR_CONDITIONING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_HUMIDIFIER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Humidifier",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_HUMIDIFIER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_HEATING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Heating", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_HEATING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RADIATOR_06C1_APPEARANCE_SUB_CATEGORY));
		assertEquals("Radiator", APPEARANCE_SUB_CATEGORY_MAPPING.get(RADIATOR_06C1_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BOILER_06C2_APPEARANCE_SUB_CATEGORY));
		assertEquals("Boiler", APPEARANCE_SUB_CATEGORY_MAPPING.get(BOILER_06C2_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HEAT_PUMP_06C3_APPEARANCE_SUB_CATEGORY));
		assertEquals("Heat Pump", APPEARANCE_SUB_CATEGORY_MAPPING.get(HEAT_PUMP_06C3_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(INFRARED_HEATER_06C4_APPEARANCE_SUB_CATEGORY));
		assertEquals("Infrared Heater",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(INFRARED_HEATER_06C4_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RADIANT_PANEL_HEATER_06C5_APPEARANCE_SUB_CATEGORY));
		assertEquals("Radiant Panel Heater",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(RADIANT_PANEL_HEATER_06C5_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FAN_HEATER_06C6_APPEARANCE_SUB_CATEGORY));
		assertEquals("Fan Heater", APPEARANCE_SUB_CATEGORY_MAPPING.get(FAN_HEATER_06C6_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AIR_CURTAIN_06C7_APPEARANCE_SUB_CATEGORY));
		assertEquals("Air Curtain", APPEARANCE_SUB_CATEGORY_MAPPING.get(AIR_CURTAIN_06C7_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_ACCESS_CONTROL_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Access Control",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_ACCESS_CONTROL_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ACCESS_DOOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Access Door", APPEARANCE_SUB_CATEGORY_MAPPING.get(ACCESS_DOOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GARAGE_DOOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Garage Door", APPEARANCE_SUB_CATEGORY_MAPPING.get(GARAGE_DOOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EMERGENCY_EXIT_DOOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Emergency Exit Door",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(EMERGENCY_EXIT_DOOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ACCESS_LOCK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Access Lock", APPEARANCE_SUB_CATEGORY_MAPPING.get(ACCESS_LOCK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ELEVATOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Elevator", APPEARANCE_SUB_CATEGORY_MAPPING.get(ELEVATOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WINDOW_APPEARANCE_SUB_CATEGORY));
		assertEquals("Window", APPEARANCE_SUB_CATEGORY_MAPPING.get(WINDOW_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ENTRANCE_GATE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Entrance Gate", APPEARANCE_SUB_CATEGORY_MAPPING.get(ENTRANCE_GATE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DOOR_LOCK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Door Lock", APPEARANCE_SUB_CATEGORY_MAPPING.get(DOOR_LOCK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOCKER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Locker", APPEARANCE_SUB_CATEGORY_MAPPING.get(LOCKER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_MOTORIZED_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Motorized Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_MOTORIZED_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MOTORIZED_GATE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Motorized Gate", APPEARANCE_SUB_CATEGORY_MAPPING.get(MOTORIZED_GATE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AWNING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Awning", APPEARANCE_SUB_CATEGORY_MAPPING.get(AWNING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BLINDS_OR_SHADES_APPEARANCE_SUB_CATEGORY));
		assertEquals("Blinds or Shades", APPEARANCE_SUB_CATEGORY_MAPPING.get(BLINDS_OR_SHADES_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CURTAINS_APPEARANCE_SUB_CATEGORY));
		assertEquals("Curtains", APPEARANCE_SUB_CATEGORY_MAPPING.get(CURTAINS_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SCREEN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Screen", APPEARANCE_SUB_CATEGORY_MAPPING.get(SCREEN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_POWER_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Power Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_POWER_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POWER_OUTLET_APPEARANCE_SUB_CATEGORY));
		assertEquals("Power Outlet", APPEARANCE_SUB_CATEGORY_MAPPING.get(POWER_OUTLET_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POWER_STRIP_APPEARANCE_SUB_CATEGORY));
		assertEquals("Power Strip", APPEARANCE_SUB_CATEGORY_MAPPING.get(POWER_STRIP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PLUG_APPEARANCE_SUB_CATEGORY));
		assertEquals("Plug", APPEARANCE_SUB_CATEGORY_MAPPING.get(PLUG_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POWER_SUPPLY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Power Supply", APPEARANCE_SUB_CATEGORY_MAPPING.get(POWER_SUPPLY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(L_E_D_DRIVER_APPEARANCE_SUB_CATEGORY));
		assertEquals("LED Driver", APPEARANCE_SUB_CATEGORY_MAPPING.get(L_E_D_DRIVER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FLUORESCENT_LAMP_GEAR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Fluorescent Lamp Gear",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(FLUORESCENT_LAMP_GEAR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(H_I_D_LAMP_GEAR_APPEARANCE_SUB_CATEGORY));
		assertEquals("HID Lamp Gear", APPEARANCE_SUB_CATEGORY_MAPPING.get(H_I_D_LAMP_GEAR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CHARGE_CASE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Charge Case", APPEARANCE_SUB_CATEGORY_MAPPING.get(CHARGE_CASE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POWER_BANK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Power Bank", APPEARANCE_SUB_CATEGORY_MAPPING.get(POWER_BANK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_LIGHT_SOURCE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Light Source",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_LIGHT_SOURCE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(INCANDESCENT_LIGHT_BULB_APPEARANCE_SUB_CATEGORY));
		assertEquals("Incandescent Light Bulb",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(INCANDESCENT_LIGHT_BULB_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LED_LAMP_APPEARANCE_SUB_CATEGORY));
		assertEquals("LED Lamp", APPEARANCE_SUB_CATEGORY_MAPPING.get(LED_LAMP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HID_LAMP_APPEARANCE_SUB_CATEGORY));
		assertEquals("HID Lamp", APPEARANCE_SUB_CATEGORY_MAPPING.get(HID_LAMP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FLUORESCENT_LAMP_APPEARANCE_SUB_CATEGORY));
		assertEquals("Fluorescent Lamp", APPEARANCE_SUB_CATEGORY_MAPPING.get(FLUORESCENT_LAMP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LED_ARRAY_APPEARANCE_SUB_CATEGORY));
		assertEquals("LED Array", APPEARANCE_SUB_CATEGORY_MAPPING.get(LED_ARRAY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MULTI_COLOR_LED_ARRAY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Multi-Color LED Array",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(MULTI_COLOR_LED_ARRAY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOW_VOLTAGE_HALOGEN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Low voltage halogen",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(LOW_VOLTAGE_HALOGEN_APPEARANCE_SUB_CATEGORY));
		assertTrue(
				APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ORGANIC_LIGHT_EMITTING_DIODE_OLED_APPEARANCE_SUB_CATEGORY));
		assertEquals("Organic light emitting diode (OLED)",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(ORGANIC_LIGHT_EMITTING_DIODE_OLED_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_WINDOW_COVERING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Window Covering",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_WINDOW_COVERING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WINDOW_SHADES_APPEARANCE_SUB_CATEGORY));
		assertEquals("Window Shades", APPEARANCE_SUB_CATEGORY_MAPPING.get(WINDOW_SHADES_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WINDOW_BLINDS_APPEARANCE_SUB_CATEGORY));
		assertEquals("Window Blinds", APPEARANCE_SUB_CATEGORY_MAPPING.get(WINDOW_BLINDS_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WINDOW_AWNING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Window Awning", APPEARANCE_SUB_CATEGORY_MAPPING.get(WINDOW_AWNING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WINDOW_CURTAIN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Window Curtain", APPEARANCE_SUB_CATEGORY_MAPPING.get(WINDOW_CURTAIN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EXTERIOR_SHUTTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Exterior Shutter", APPEARANCE_SUB_CATEGORY_MAPPING.get(EXTERIOR_SHUTTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EXTERIOR_SCREEN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Exterior Screen", APPEARANCE_SUB_CATEGORY_MAPPING.get(EXTERIOR_SCREEN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_AUDIO_SINK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Audio Sink",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_AUDIO_SINK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(STANDALONE_SPEAKER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Standalone Speaker",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(STANDALONE_SPEAKER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SOUNDBAR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Soundbar", APPEARANCE_SUB_CATEGORY_MAPPING.get(SOUNDBAR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BOOKSHELF_SPEAKER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bookshelf Speaker",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(BOOKSHELF_SPEAKER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(STANDMOUNTED_SPEAKER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Standmounted Speaker",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(STANDMOUNTED_SPEAKER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SPEAKERPHONE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Speakerphone", APPEARANCE_SUB_CATEGORY_MAPPING.get(SPEAKERPHONE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_AUDIO_SOURCE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Audio Source",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_AUDIO_SOURCE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MICROPHONE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Microphone", APPEARANCE_SUB_CATEGORY_MAPPING.get(MICROPHONE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ALARM_APPEARANCE_SUB_CATEGORY));
		assertEquals("Alarm", APPEARANCE_SUB_CATEGORY_MAPPING.get(ALARM_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BELL_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bell", APPEARANCE_SUB_CATEGORY_MAPPING.get(BELL_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HORN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Horn", APPEARANCE_SUB_CATEGORY_MAPPING.get(HORN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BROADCASTING_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Broadcasting Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(BROADCASTING_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SERVICE_DESK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Service Desk", APPEARANCE_SUB_CATEGORY_MAPPING.get(SERVICE_DESK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(KIOSK_APPEARANCE_SUB_CATEGORY));
		assertEquals("Kiosk", APPEARANCE_SUB_CATEGORY_MAPPING.get(KIOSK_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BROADCASTING_ROOM_APPEARANCE_SUB_CATEGORY));
		assertEquals("Broadcasting Room",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(BROADCASTING_ROOM_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AUDITORIUM_APPEARANCE_SUB_CATEGORY));
		assertEquals("Auditorium", APPEARANCE_SUB_CATEGORY_MAPPING.get(AUDITORIUM_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_MOTORIZED_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Motorized Vehicle",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_MOTORIZED_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CAR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Car", APPEARANCE_SUB_CATEGORY_MAPPING.get(CAR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LARGE_GOODS_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Large Goods Vehicle",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(LARGE_GOODS_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TWO_WHEELED_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("2-Wheeled Vehicle",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(TWO_WHEELED_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MOTORBIKE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Motorbike", APPEARANCE_SUB_CATEGORY_MAPPING.get(MOTORBIKE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SCOOTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Scooter", APPEARANCE_SUB_CATEGORY_MAPPING.get(SCOOTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MOPED_APPEARANCE_SUB_CATEGORY));
		assertEquals("Moped", APPEARANCE_SUB_CATEGORY_MAPPING.get(MOPED_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(THREE_WHEELED_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("3-Wheeled Vehicle",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(THREE_WHEELED_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LIGHT_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Light Vehicle", APPEARANCE_SUB_CATEGORY_MAPPING.get(LIGHT_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(QUAD_BIKE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Quad Bike", APPEARANCE_SUB_CATEGORY_MAPPING.get(QUAD_BIKE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MINIBUS_APPEARANCE_SUB_CATEGORY));
		assertEquals("Minibus", APPEARANCE_SUB_CATEGORY_MAPPING.get(MINIBUS_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BUS_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bus", APPEARANCE_SUB_CATEGORY_MAPPING.get(BUS_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TROLLEY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Trolley", APPEARANCE_SUB_CATEGORY_MAPPING.get(TROLLEY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AGRICULTURAL_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Agricultural Vehicle",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(AGRICULTURAL_VEHICLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CAMPER_CARAVAN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Camper / Caravan", APPEARANCE_SUB_CATEGORY_MAPPING.get(CAMPER_CARAVAN_APPEARANCE_SUB_CATEGORY));
		assertTrue(
				APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RECREATIONAL_VEHICLE_MOTOR_HOME_APPEARANCE_SUB_CATEGORY));
		assertEquals("Recreational Vehicle / Motor Home",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(RECREATIONAL_VEHICLE_MOTOR_HOME_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_DOMESTIC_APPLIANCE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Domestic Appliance",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_DOMESTIC_APPLIANCE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(REFRIGERATOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Refrigerator", APPEARANCE_SUB_CATEGORY_MAPPING.get(REFRIGERATOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FREEZER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Freezer", APPEARANCE_SUB_CATEGORY_MAPPING.get(FREEZER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(OVEN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Oven", APPEARANCE_SUB_CATEGORY_MAPPING.get(OVEN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MICROWAVE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Microwave", APPEARANCE_SUB_CATEGORY_MAPPING.get(MICROWAVE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TOASTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Toaster", APPEARANCE_SUB_CATEGORY_MAPPING.get(TOASTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WASHING_MACHINE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Washing Machine", APPEARANCE_SUB_CATEGORY_MAPPING.get(WASHING_MACHINE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DRYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Dryer", APPEARANCE_SUB_CATEGORY_MAPPING.get(DRYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(COFFEE_MAKER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Coffee maker", APPEARANCE_SUB_CATEGORY_MAPPING.get(COFFEE_MAKER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CLOTHES_IRON_APPEARANCE_SUB_CATEGORY));
		assertEquals("Clothes iron", APPEARANCE_SUB_CATEGORY_MAPPING.get(CLOTHES_IRON_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CURLING_IRON_APPEARANCE_SUB_CATEGORY));
		assertEquals("Curling iron", APPEARANCE_SUB_CATEGORY_MAPPING.get(CURLING_IRON_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HAIR_DRYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Hair dryer", APPEARANCE_SUB_CATEGORY_MAPPING.get(HAIR_DRYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(VACUUM_CLEANER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Vacuum cleaner", APPEARANCE_SUB_CATEGORY_MAPPING.get(VACUUM_CLEANER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(ROBOTIC_VACUUM_CLEANER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Robotic vacuum cleaner",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(ROBOTIC_VACUUM_CLEANER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RICE_COOKER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Rice cooker", APPEARANCE_SUB_CATEGORY_MAPPING.get(RICE_COOKER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CLOTHES_STEAMER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Clothes steamer", APPEARANCE_SUB_CATEGORY_MAPPING.get(CLOTHES_STEAMER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_WEARABLE_AUDIO_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Wearable Audio Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_WEARABLE_AUDIO_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(EARBUD_APPEARANCE_SUB_CATEGORY));
		assertEquals("Earbud", APPEARANCE_SUB_CATEGORY_MAPPING.get(EARBUD_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HEADSET_APPEARANCE_SUB_CATEGORY));
		assertEquals("Headset", APPEARANCE_SUB_CATEGORY_MAPPING.get(HEADSET_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HEADPHONES_APPEARANCE_SUB_CATEGORY));
		assertEquals("Headphones", APPEARANCE_SUB_CATEGORY_MAPPING.get(HEADPHONES_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(NECK_BAND_APPEARANCE_SUB_CATEGORY));
		assertEquals("Neck Band", APPEARANCE_SUB_CATEGORY_MAPPING.get(NECK_BAND_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_AIRCRAFT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Aircraft", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_AIRCRAFT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LIGHT_AIRCRAFT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Light Aircraft", APPEARANCE_SUB_CATEGORY_MAPPING.get(LIGHT_AIRCRAFT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MICROLIGHT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Microlight", APPEARANCE_SUB_CATEGORY_MAPPING.get(MICROLIGHT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PARAGLIDER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Paraglider", APPEARANCE_SUB_CATEGORY_MAPPING.get(PARAGLIDER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LARGE_PASSENGER_AIRCRAFT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Large Passenger Aircraft",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(LARGE_PASSENGER_AIRCRAFT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_AV_EQUIPMENT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic AV Equipment",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_AV_EQUIPMENT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(AMPLIFIER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Amplifier", APPEARANCE_SUB_CATEGORY_MAPPING.get(AMPLIFIER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RECEIVER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Receiver", APPEARANCE_SUB_CATEGORY_MAPPING.get(RECEIVER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(RADIO_APPEARANCE_SUB_CATEGORY));
		assertEquals("Radio", APPEARANCE_SUB_CATEGORY_MAPPING.get(RADIO_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TUNER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Tuner", APPEARANCE_SUB_CATEGORY_MAPPING.get(TUNER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TURNTABLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Turntable", APPEARANCE_SUB_CATEGORY_MAPPING.get(TURNTABLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(CD_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("CD Player", APPEARANCE_SUB_CATEGORY_MAPPING.get(CD_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(DVD_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("DVD Player", APPEARANCE_SUB_CATEGORY_MAPPING.get(DVD_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BLURAY_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Bluray Player", APPEARANCE_SUB_CATEGORY_MAPPING.get(BLURAY_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(OPTICAL_DISC_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Optical Disc Player",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(OPTICAL_DISC_PLAYER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(SET_TOP_BOX_APPEARANCE_SUB_CATEGORY));
		assertEquals("Set-Top Box", APPEARANCE_SUB_CATEGORY_MAPPING.get(SET_TOP_BOX_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_DISPLAY_EQUIPMENT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Display Equipment",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_DISPLAY_EQUIPMENT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(TELEVISION_APPEARANCE_SUB_CATEGORY));
		assertEquals("Television", APPEARANCE_SUB_CATEGORY_MAPPING.get(TELEVISION_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MONITOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Monitor", APPEARANCE_SUB_CATEGORY_MAPPING.get(MONITOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PROJECTOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Projector", APPEARANCE_SUB_CATEGORY_MAPPING.get(PROJECTOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_HEARINGAID_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Hearing aid",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_HEARINGAID_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(IN_EAR_HEARING_AID_APPEARANCE_SUB_CATEGORY));
		assertEquals("In-ear hearing aid",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(IN_EAR_HEARING_AID_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(BEHIND_EAR_HEARING_AID_APPEARANCE_SUB_CATEGORY));
		assertEquals("Behind-ear hearing aid",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(BEHIND_EAR_HEARING_AID_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(COCHLEAR_IMPLANT_APPEARANCE_SUB_CATEGORY));
		assertEquals("Cochlear Implant", APPEARANCE_SUB_CATEGORY_MAPPING.get(COCHLEAR_IMPLANT_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_GAMING_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Gaming", APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_GAMING_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HOME_VIDEO_GAME_CONSOLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Home Video Game Console",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(HOME_VIDEO_GAME_CONSOLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(PORTABLE_HANDHELD_CONSOLE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Portable handheld console",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(PORTABLE_HANDHELD_CONSOLE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_PULSE_OXIMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Pulse Oximeter",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_PULSE_OXIMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(FINGERTIP_PULSE_OXIMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Fingertip Pulse Oximeter",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(FINGERTIP_PULSE_OXIMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(WRIST_WORN_PULSE_OXIMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Wrist Worn Pulse Oximeter",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(WRIST_WORN_PULSE_OXIMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_WEIGHT_SCALE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Weight Scale",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_WEIGHT_SCALE_APPEARANCE_SUB_CATEGORY));
		assertTrue(
				APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_PERSONAL_MOBILITY_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Personal Mobility Device",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_PERSONAL_MOBILITY_DEVICE_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(POWERED_WHEELCHAIR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Powered Wheelchair",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(POWERED_WHEELCHAIR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(MOBILITY_SCOOTER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Mobility Scooter", APPEARANCE_SUB_CATEGORY_MAPPING.get(MOBILITY_SCOOTER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING
				.containsKey(GENERIC_CONTINUOUS_GLUCOSE_MONITOR_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Continuous Glucose Monitor",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_CONTINUOUS_GLUCOSE_MONITOR_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_INSULIN_PUMP_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Insulin Pump",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_INSULIN_PUMP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(INSULIN_PUMP_DURABLE_PUMP_APPEARANCE_SUB_CATEGORY));
		assertEquals("Insulin Pump, durable pump",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(INSULIN_PUMP_DURABLE_PUMP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(INSULIN_PUMP_PATCH_PUMP_APPEARANCE_SUB_CATEGORY));
		assertEquals("Insulin Pump, patch pump",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(INSULIN_PUMP_PATCH_PUMP_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(INSULIN_PEN_APPEARANCE_SUB_CATEGORY));
		assertEquals("Insulin Pen", APPEARANCE_SUB_CATEGORY_MAPPING.get(INSULIN_PEN_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_MEDICATION_DELIVERY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Medication Delivery",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_MEDICATION_DELIVERY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_SPIROMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Spirometer",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_SPIROMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(HANDHELD_SPIROMETER_APPEARANCE_SUB_CATEGORY));
		assertEquals("Handheld Spirometer",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(HANDHELD_SPIROMETER_APPEARANCE_SUB_CATEGORY));
		assertTrue(
				APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(GENERIC_OUTDOOR_SPORTS_ACTIVITY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Generic Outdoor Sports Activity",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(GENERIC_OUTDOOR_SPORTS_ACTIVITY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOCATION_DISPLAY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Location Display", APPEARANCE_SUB_CATEGORY_MAPPING.get(LOCATION_DISPLAY_APPEARANCE_SUB_CATEGORY));
		assertTrue(
				APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOCATION_AND_NAVIGATION_DISPLAY_APPEARANCE_SUB_CATEGORY));
		assertEquals("Location and Navigation Display",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(LOCATION_AND_NAVIGATION_DISPLAY_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOCATION_POD_APPEARANCE_SUB_CATEGORY));
		assertEquals("Location Pod", APPEARANCE_SUB_CATEGORY_MAPPING.get(LOCATION_POD_APPEARANCE_SUB_CATEGORY));
		assertTrue(APPEARANCE_SUB_CATEGORY_MAPPING.containsKey(LOCATION_AND_NAVIGATION_POD_APPEARANCE_SUB_CATEGORY));
		assertEquals("Location and Navigation Pod",
				APPEARANCE_SUB_CATEGORY_MAPPING.get(LOCATION_AND_NAVIGATION_POD_APPEARANCE_SUB_CATEGORY));
	}

}