package org.im97mori.ble.constants;

import static org.im97mori.ble.constants.CharacteristicUUID.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class CharacteristicUUIDTest {

	@Test
	public void test_map_00001() {
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_NAME_CHARACTERISTIC));
		assertEquals("Device Name", CHARACTERISTIC_MAPPING_128.get(DEVICE_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPEARANCE_CHARACTERISTIC));
		assertEquals("Appearance", CHARACTERISTIC_MAPPING_128.get(APPEARANCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERIPHERAL_PRIVACY_FLAG_CHARACTERISTIC));
		assertEquals("Peripheral Privacy Flag", CHARACTERISTIC_MAPPING_128.get(PERIPHERAL_PRIVACY_FLAG_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RECONNECTION_ADDRESS_CHARACTERISTIC));
		assertEquals("Reconnection Address", CHARACTERISTIC_MAPPING_128.get(RECONNECTION_ADDRESS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_CHARACTERISTIC));
		assertEquals("Peripheral Preferred Connection Parameters",
				CHARACTERISTIC_MAPPING_128.get(PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SERVICE_CHANGED_CHARACTERISTIC));
		assertEquals("Service Changed", CHARACTERISTIC_MAPPING_128.get(SERVICE_CHANGED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_LEVEL_CHARACTERISTIC));
		assertEquals("Alert Level", CHARACTERISTIC_MAPPING_128.get(ALERT_LEVEL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TX_POWER_LEVEL_CHARACTERISTIC));
		assertEquals("Tx Power Level", CHARACTERISTIC_MAPPING_128.get(TX_POWER_LEVEL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_TIME_CHARACTERISTIC));
		assertEquals("Date Time", CHARACTERISTIC_MAPPING_128.get(DATE_TIME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DAY_OF_WEEK_CHARACTERISTIC));
		assertEquals("Day of Week", CHARACTERISTIC_MAPPING_128.get(DAY_OF_WEEK_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DAY_DATE_TIME_CHARACTERISTIC));
		assertEquals("Day Date Time", CHARACTERISTIC_MAPPING_128.get(DAY_DATE_TIME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EXACT_TIME_256_CHARACTERISTIC));
		assertEquals("Exact Time 256", CHARACTERISTIC_MAPPING_128.get(EXACT_TIME_256_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DST_OFFSET_CHARACTERISTIC));
		assertEquals("DST Offset", CHARACTERISTIC_MAPPING_128.get(DST_OFFSET_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_ZONE_CHARACTERISTIC));
		assertEquals("Time Zone", CHARACTERISTIC_MAPPING_128.get(TIME_ZONE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCAL_TIME_INFORMATION_CHARACTERISTIC));
		assertEquals("Local Time Information", CHARACTERISTIC_MAPPING_128.get(LOCAL_TIME_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_WITH_DST_CHARACTERISTIC));
		assertEquals("Time with DST", CHARACTERISTIC_MAPPING_128.get(TIME_WITH_DST_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_ACCURACY_CHARACTERISTIC));
		assertEquals("Time Accuracy", CHARACTERISTIC_MAPPING_128.get(TIME_ACCURACY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SOURCE_CHARACTERISTIC));
		assertEquals("Time Source", CHARACTERISTIC_MAPPING_128.get(TIME_SOURCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REFERENCE_TIME_INFORMATION_CHARACTERISTIC));
		assertEquals("Reference Time Information",
				CHARACTERISTIC_MAPPING_128.get(REFERENCE_TIME_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_UPDATE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Time Update Control Point",
				CHARACTERISTIC_MAPPING_128.get(TIME_UPDATE_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_UPDATE_STATE_CHARACTERISTIC));
		assertEquals("Time Update State", CHARACTERISTIC_MAPPING_128.get(TIME_UPDATE_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLUCOSE_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Glucose Measurement", CHARACTERISTIC_MAPPING_128.get(GLUCOSE_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_LEVEL_CHARACTERISTIC));
		assertEquals("Battery Level", CHARACTERISTIC_MAPPING_128.get(BATTERY_LEVEL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Temperature Measurement", CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_TYPE_CHARACTERISTIC));
		assertEquals("Temperature Type", CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INTERMEDIATE_TEMPERATURE_CHARACTERISTIC));
		assertEquals("Intermediate Temperature",
				CHARACTERISTIC_MAPPING_128.get(INTERMEDIATE_TEMPERATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEASUREMENT_INTERVAL_CHARACTERISTIC));
		assertEquals("Measurement Interval", CHARACTERISTIC_MAPPING_128.get(MEASUREMENT_INTERVAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOT_KEYBOARD_INPUT_REPORT_CHARACTERISTIC));
		assertEquals("Boot Keyboard Input Report",
				CHARACTERISTIC_MAPPING_128.get(BOOT_KEYBOARD_INPUT_REPORT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SYSTEM_ID_CHARACTERISTIC));
		assertEquals("System ID", CHARACTERISTIC_MAPPING_128.get(SYSTEM_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MODEL_NUMBER_STRING_CHARACTERISTIC));
		assertEquals("Model Number String", CHARACTERISTIC_MAPPING_128.get(MODEL_NUMBER_STRING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SERIAL_NUMBER_STRING_CHARACTERISTIC));
		assertEquals("Serial Number String", CHARACTERISTIC_MAPPING_128.get(SERIAL_NUMBER_STRING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIRMWARE_REVISION_STRING_CHARACTERISTIC));
		assertEquals("Firmware Revision String",
				CHARACTERISTIC_MAPPING_128.get(FIRMWARE_REVISION_STRING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HARDWARE_REVISION_STRING_CHARACTERISTIC));
		assertEquals("Hardware Revision String",
				CHARACTERISTIC_MAPPING_128.get(HARDWARE_REVISION_STRING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOFTWARE_REVISION_STRING_CHARACTERISTIC));
		assertEquals("Software Revision String",
				CHARACTERISTIC_MAPPING_128.get(SOFTWARE_REVISION_STRING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MANUFACTURER_NAME_STRING_CHARACTERISTIC));
		assertEquals("Manufacturer Name String",
				CHARACTERISTIC_MAPPING_128.get(MANUFACTURER_NAME_STRING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128
				.containsKey(IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_CHARACTERISTIC));
		assertEquals("IEEE 11073-20601 Regulatory Certification Data List",
				CHARACTERISTIC_MAPPING_128.get(IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_TIME_CHARACTERISTIC));
		assertEquals("Current Time", CHARACTERISTIC_MAPPING_128.get(CURRENT_TIME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAGNETIC_DECLINATION_CHARACTERISTIC));
		assertEquals("Magnetic Declination", CHARACTERISTIC_MAPPING_128.get(MAGNETIC_DECLINATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SCAN_REFRESH_CHARACTERISTIC));
		assertEquals("Scan Refresh", CHARACTERISTIC_MAPPING_128.get(SCAN_REFRESH_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOT_KEYBOARD_OUTPUT_REPORT_CHARACTERISTIC));
		assertEquals("Boot Keyboard Output Report",
				CHARACTERISTIC_MAPPING_128.get(BOOT_KEYBOARD_OUTPUT_REPORT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOT_MOUSE_INPUT_REPORT_CHARACTERISTIC));
		assertEquals("Boot Mouse Input Report", CHARACTERISTIC_MAPPING_128.get(BOOT_MOUSE_INPUT_REPORT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLUCOSE_MEASUREMENT_CONTEXT_CHARACTERISTIC));
		assertEquals("Glucose Measurement Context",
				CHARACTERISTIC_MAPPING_128.get(GLUCOSE_MEASUREMENT_CONTEXT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Blood Pressure Measurement",
				CHARACTERISTIC_MAPPING_128.get(BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC));
		assertEquals("Intermediate Cuff Pressure",
				CHARACTERISTIC_MAPPING_128.get(INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEART_RATE_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Heart Rate Measurement", CHARACTERISTIC_MAPPING_128.get(HEART_RATE_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BODY_SENSOR_LOCATION_CHARACTERISTIC));
		assertEquals("Body Sensor Location", CHARACTERISTIC_MAPPING_128.get(BODY_SENSOR_LOCATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEART_RATE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Heart Rate Control Point",
				CHARACTERISTIC_MAPPING_128.get(HEART_RATE_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_STATUS_CHARACTERISTIC));
		assertEquals("Alert Status", CHARACTERISTIC_MAPPING_128.get(ALERT_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RINGER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Ringer Control Point", CHARACTERISTIC_MAPPING_128.get(RINGER_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RINGER_SETTING_CHARACTERISTIC));
		assertEquals("Ringer Setting", CHARACTERISTIC_MAPPING_128.get(RINGER_SETTING_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_CATEGORY_ID_BIT_MASK_CHARACTERISTIC));
		assertEquals("Alert Category ID Bit Mask",
				CHARACTERISTIC_MAPPING_128.get(ALERT_CATEGORY_ID_BIT_MASK_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_CATEGORY_ID_CHARACTERISTIC));
		assertEquals("Alert Category ID", CHARACTERISTIC_MAPPING_128.get(ALERT_CATEGORY_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_NOTIFICATION_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Alert Notification Control Point",
				CHARACTERISTIC_MAPPING_128.get(ALERT_NOTIFICATION_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UNREAD_ALERT_STATUS_CHARACTERISTIC));
		assertEquals("Unread Alert Status", CHARACTERISTIC_MAPPING_128.get(UNREAD_ALERT_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NEW_ALERT_CHARACTERISTIC));
		assertEquals("New Alert", CHARACTERISTIC_MAPPING_128.get(NEW_ALERT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_NEW_ALERT_CATEGORY_CHARACTERISTIC));
		assertEquals("Supported New Alert Category",
				CHARACTERISTIC_MAPPING_128.get(SUPPORTED_NEW_ALERT_CATEGORY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_UNREAD_ALERT_CATEGORY_CHARACTERISTIC));
		assertEquals("Supported Unread Alert Category",
				CHARACTERISTIC_MAPPING_128.get(SUPPORTED_UNREAD_ALERT_CATEGORY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLOOD_PRESSURE_FEATURE_CHARACTERISTIC));
		assertEquals("Blood Pressure Feature", CHARACTERISTIC_MAPPING_128.get(BLOOD_PRESSURE_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HID_INFORMATION_CHARACTERISTIC));
		assertEquals("HID Information", CHARACTERISTIC_MAPPING_128.get(HID_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REPORT_MAP_CHARACTERISTIC));
		assertEquals("Report Map", CHARACTERISTIC_MAPPING_128.get(REPORT_MAP_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HID_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("HID Control Point", CHARACTERISTIC_MAPPING_128.get(HID_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REPORT_CHARACTERISTIC));
		assertEquals("Report", CHARACTERISTIC_MAPPING_128.get(REPORT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PROTOCOL_MODE_CHARACTERISTIC));
		assertEquals("Protocol Mode", CHARACTERISTIC_MAPPING_128.get(PROTOCOL_MODE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SCAN_INTERVAL_WINDOW_CHARACTERISTIC));
		assertEquals("Scan Interval Window", CHARACTERISTIC_MAPPING_128.get(SCAN_INTERVAL_WINDOW_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PNP_ID_CHARACTERISTIC));
		assertEquals("PnP ID", CHARACTERISTIC_MAPPING_128.get(PNP_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLUCOSE_FEATURE_CHARACTERISTIC));
		assertEquals("Glucose Feature", CHARACTERISTIC_MAPPING_128.get(GLUCOSE_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Record Access Control Point",
				CHARACTERISTIC_MAPPING_128.get(RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RSC_MEASUREMENT_CHARACTERISTIC));
		assertEquals("RSC Measurement", CHARACTERISTIC_MAPPING_128.get(RSC_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RSC_FEATURE_CHARACTERISTIC));
		assertEquals("RSC Feature", CHARACTERISTIC_MAPPING_128.get(RSC_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SC_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("SC Control Point", CHARACTERISTIC_MAPPING_128.get(SC_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AGGREGATE_CHARACTERISTIC));
		assertEquals("Aggregate", CHARACTERISTIC_MAPPING_128.get(AGGREGATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CSC_MEASUREMENT_CHARACTERISTIC));
		assertEquals("CSC Measurement", CHARACTERISTIC_MAPPING_128.get(CSC_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CSC_FEATURE_CHARACTERISTIC));
		assertEquals("CSC Feature", CHARACTERISTIC_MAPPING_128.get(CSC_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SENSOR_LOCATION_CHARACTERISTIC));
		assertEquals("Sensor Location", CHARACTERISTIC_MAPPING_128.get(SENSOR_LOCATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLX_SPOT_CHECK_MEASUREMENT_CHARACTERISTIC));
		assertEquals("PLX Spot-Check Measurement",
				CHARACTERISTIC_MAPPING_128.get(PLX_SPOT_CHECK_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLX_CONTINUOUS_MEASUREMENT_CHARACTERISTIC));
		assertEquals("PLX Continuous Measurement",
				CHARACTERISTIC_MAPPING_128.get(PLX_CONTINUOUS_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLX_FEATURES_CHARACTERISTIC));
		assertEquals("PLX Features", CHARACTERISTIC_MAPPING_128.get(PLX_FEATURES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Cycling Power Measurement",
				CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_VECTOR_CHARACTERISTIC));
		assertEquals("Cycling Power Vector", CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_VECTOR_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_FEATURE_CHARACTERISTIC));
		assertEquals("Cycling Power Feature", CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Cycling Power Control Point",
				CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCATION_AND_SPEED_CHARACTERISTIC));
		assertEquals("Location and Speed", CHARACTERISTIC_MAPPING_128.get(LOCATION_AND_SPEED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NAVIGATION_CHARACTERISTIC));
		assertEquals("Navigation", CHARACTERISTIC_MAPPING_128.get(NAVIGATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POSITION_QUALITY_CHARACTERISTIC));
		assertEquals("Position Quality", CHARACTERISTIC_MAPPING_128.get(POSITION_QUALITY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LN_FEATURE_CHARACTERISTIC));
		assertEquals("LN Feature", CHARACTERISTIC_MAPPING_128.get(LN_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LN_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("LN Control Point", CHARACTERISTIC_MAPPING_128.get(LN_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELEVATION_CHARACTERISTIC));
		assertEquals("Elevation", CHARACTERISTIC_MAPPING_128.get(ELEVATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PRESSURE_CHARACTERISTIC));
		assertEquals("Pressure", CHARACTERISTIC_MAPPING_128.get(PRESSURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_CHARACTERISTIC));
		assertEquals("Temperature", CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HUMIDITY_CHARACTERISTIC));
		assertEquals("Humidity", CHARACTERISTIC_MAPPING_128.get(HUMIDITY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRUE_WIND_SPEED_CHARACTERISTIC));
		assertEquals("True Wind Speed", CHARACTERISTIC_MAPPING_128.get(TRUE_WIND_SPEED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRUE_WIND_DIRECTION_CHARACTERISTIC));
		assertEquals("True Wind Direction", CHARACTERISTIC_MAPPING_128.get(TRUE_WIND_DIRECTION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPARENT_WIND_SPEED_CHARACTERISTIC));
		assertEquals("Apparent Wind Speed", CHARACTERISTIC_MAPPING_128.get(APPARENT_WIND_SPEED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPARENT_WIND_DIRECTION_CHARACTERISTIC));
		assertEquals("Apparent Wind Direction", CHARACTERISTIC_MAPPING_128.get(APPARENT_WIND_DIRECTION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GUST_FACTOR_CHARACTERISTIC));
		assertEquals("Gust Factor", CHARACTERISTIC_MAPPING_128.get(GUST_FACTOR_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POLLEN_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Pollen Concentration", CHARACTERISTIC_MAPPING_128.get(POLLEN_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UV_INDEX_CHARACTERISTIC));
		assertEquals("UV Index", CHARACTERISTIC_MAPPING_128.get(UV_INDEX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IRRADIANCE_CHARACTERISTIC));
		assertEquals("Irradiance", CHARACTERISTIC_MAPPING_128.get(IRRADIANCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RAINFALL_CHARACTERISTIC));
		assertEquals("Rainfall", CHARACTERISTIC_MAPPING_128.get(RAINFALL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WIND_CHILL_CHARACTERISTIC));
		assertEquals("Wind Chill", CHARACTERISTIC_MAPPING_128.get(WIND_CHILL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEAT_INDEX_CHARACTERISTIC));
		assertEquals("Heat Index", CHARACTERISTIC_MAPPING_128.get(HEAT_INDEX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEW_POINT_CHARACTERISTIC));
		assertEquals("Dew Point", CHARACTERISTIC_MAPPING_128.get(DEW_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DESCRIPTOR_VALUE_CHANGED_CHARACTERISTIC));
		assertEquals("Descriptor Value Changed",
				CHARACTERISTIC_MAPPING_128.get(DESCRIPTOR_VALUE_CHANGED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertEquals("Aerobic Heart Rate Lower Limit",
				CHARACTERISTIC_MAPPING_128.get(AEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AEROBIC_THRESHOLD_CHARACTERISTIC));
		assertEquals("Aerobic Threshold", CHARACTERISTIC_MAPPING_128.get(AEROBIC_THRESHOLD_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AGE_CHARACTERISTIC));
		assertEquals("Age", CHARACTERISTIC_MAPPING_128.get(AGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANAEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertEquals("Anaerobic Heart Rate Lower Limit",
				CHARACTERISTIC_MAPPING_128.get(ANAEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANAEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertEquals("Anaerobic Heart Rate Upper Limit",
				CHARACTERISTIC_MAPPING_128.get(ANAEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANAEROBIC_THRESHOLD_CHARACTERISTIC));
		assertEquals("Anaerobic Threshold", CHARACTERISTIC_MAPPING_128.get(ANAEROBIC_THRESHOLD_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertEquals("Aerobic Heart Rate Upper Limit",
				CHARACTERISTIC_MAPPING_128.get(AEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_OF_BIRTH_CHARACTERISTIC));
		assertEquals("Date of Birth", CHARACTERISTIC_MAPPING_128.get(DATE_OF_BIRTH_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_OF_THRESHOLD_ASSESSMENT_CHARACTERISTIC));
		assertEquals("Date of Threshold Assessment",
				CHARACTERISTIC_MAPPING_128.get(DATE_OF_THRESHOLD_ASSESSMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EMAIL_ADDRESS_CHARACTERISTIC));
		assertEquals("Email Address", CHARACTERISTIC_MAPPING_128.get(EMAIL_ADDRESS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FAT_BURN_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertEquals("Fat Burn Heart Rate Lower Limit",
				CHARACTERISTIC_MAPPING_128.get(FAT_BURN_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FAT_BURN_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertEquals("Fat Burn Heart Rate Upper Limit",
				CHARACTERISTIC_MAPPING_128.get(FAT_BURN_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIRST_NAME_CHARACTERISTIC));
		assertEquals("First Name", CHARACTERISTIC_MAPPING_128.get(FIRST_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIVE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals("Five Zone Heart Rate Limits",
				CHARACTERISTIC_MAPPING_128.get(FIVE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENDER_CHARACTERISTIC));
		assertEquals("Gender", CHARACTERISTIC_MAPPING_128.get(GENDER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEART_RATE_MAX_CHARACTERISTIC));
		assertEquals("Heart Rate Max", CHARACTERISTIC_MAPPING_128.get(HEART_RATE_MAX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEIGHT_CHARACTERISTIC));
		assertEquals("Height", CHARACTERISTIC_MAPPING_128.get(HEIGHT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIP_CIRCUMFERENCE_CHARACTERISTIC));
		assertEquals("Hip Circumference", CHARACTERISTIC_MAPPING_128.get(HIP_CIRCUMFERENCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LAST_NAME_CHARACTERISTIC));
		assertEquals("Last Name", CHARACTERISTIC_MAPPING_128.get(LAST_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAXIMUM_RECOMMENDED_HEART_RATE_CHARACTERISTIC));
		assertEquals("Maximum Recommended Heart Rate",
				CHARACTERISTIC_MAPPING_128.get(MAXIMUM_RECOMMENDED_HEART_RATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RESTING_HEART_RATE_CHARACTERISTIC));
		assertEquals("Resting Heart Rate", CHARACTERISTIC_MAPPING_128.get(RESTING_HEART_RATE_CHARACTERISTIC));
		assertTrue(
				CHARACTERISTIC_MAPPING_128.containsKey(SPORT_TYPE_FOR_AEROBIC_AND_ANAEROBIC_THRESHOLDS_CHARACTERISTIC));
		assertEquals("Sport Type for Aerobic and Anaerobic Thresholds",
				CHARACTERISTIC_MAPPING_128.get(SPORT_TYPE_FOR_AEROBIC_AND_ANAEROBIC_THRESHOLDS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(THREE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals("Three Zone Heart Rate Limits",
				CHARACTERISTIC_MAPPING_128.get(THREE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TWO_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals("Two Zone Heart Rate Limits",
				CHARACTERISTIC_MAPPING_128.get(TWO_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VO2_MAX_CHARACTERISTIC));
		assertEquals("VO2 Max", CHARACTERISTIC_MAPPING_128.get(VO2_MAX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WAIST_CIRCUMFERENCE_CHARACTERISTIC));
		assertEquals("Waist Circumference", CHARACTERISTIC_MAPPING_128.get(WAIST_CIRCUMFERENCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WEIGHT_CHARACTERISTIC));
		assertEquals("Weight", CHARACTERISTIC_MAPPING_128.get(WEIGHT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATABASE_CHANGE_INCREMENT_CHARACTERISTIC));
		assertEquals("Database Change Increment",
				CHARACTERISTIC_MAPPING_128.get(DATABASE_CHANGE_INCREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(USER_INDEX_CHARACTERISTIC));
		assertEquals("User Index", CHARACTERISTIC_MAPPING_128.get(USER_INDEX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BODY_COMPOSITION_FEATURE_CHARACTERISTIC));
		assertEquals("Body Composition Feature",
				CHARACTERISTIC_MAPPING_128.get(BODY_COMPOSITION_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BODY_COMPOSITION_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Body Composition Measurement",
				CHARACTERISTIC_MAPPING_128.get(BODY_COMPOSITION_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WEIGHT_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Weight Measurement", CHARACTERISTIC_MAPPING_128.get(WEIGHT_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WEIGHT_SCALE_FEATURE_CHARACTERISTIC));
		assertEquals("Weight Scale Feature", CHARACTERISTIC_MAPPING_128.get(WEIGHT_SCALE_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(USER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("User Control Point", CHARACTERISTIC_MAPPING_128.get(USER_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAGNETIC_FLUX_DENSITY_2D_CHARACTERISTIC));
		assertEquals("Magnetic Flux Density - 2D",
				CHARACTERISTIC_MAPPING_128.get(MAGNETIC_FLUX_DENSITY_2D_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAGNETIC_FLUX_DENSITY_3D_CHARACTERISTIC));
		assertEquals("Magnetic Flux Density - 3D",
				CHARACTERISTIC_MAPPING_128.get(MAGNETIC_FLUX_DENSITY_3D_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LANGUAGE_CHARACTERISTIC));
		assertEquals("Language", CHARACTERISTIC_MAPPING_128.get(LANGUAGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BAROMETRIC_PRESSURE_TREND_CHARACTERISTIC));
		assertEquals("Barometric Pressure Trend",
				CHARACTERISTIC_MAPPING_128.get(BAROMETRIC_PRESSURE_TREND_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOND_MANAGEMENT_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Bond Management Control Point",
				CHARACTERISTIC_MAPPING_128.get(BOND_MANAGEMENT_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOND_MANAGEMENT_FEATURE_CHARACTERISTIC));
		assertEquals("Bond Management Feature", CHARACTERISTIC_MAPPING_128.get(BOND_MANAGEMENT_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CENTRAL_ADDRESS_RESOLUTION_CHARACTERISTIC));
		assertEquals("Central Address Resolution",
				CHARACTERISTIC_MAPPING_128.get(CENTRAL_ADDRESS_RESOLUTION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_MEASUREMENT_CHARACTERISTIC));
		assertEquals("CGM Measurement", CHARACTERISTIC_MAPPING_128.get(CGM_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_FEATURE_CHARACTERISTIC));
		assertEquals("CGM Feature", CHARACTERISTIC_MAPPING_128.get(CGM_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_STATUS_CHARACTERISTIC));
		assertEquals("CGM Status", CHARACTERISTIC_MAPPING_128.get(CGM_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_SESSION_START_TIME_CHARACTERISTIC));
		assertEquals("CGM Session Start Time", CHARACTERISTIC_MAPPING_128.get(CGM_SESSION_START_TIME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_SESSION_RUN_TIME_CHARACTERISTIC));
		assertEquals("CGM Session Run Time", CHARACTERISTIC_MAPPING_128.get(CGM_SESSION_RUN_TIME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_SPECIFIC_OPS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("CGM Specific Ops Control Point",
				CHARACTERISTIC_MAPPING_128.get(CGM_SPECIFIC_OPS_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INDOOR_POSITIONING_CONFIGURATION_CHARACTERISTIC));
		assertEquals("Indoor Positioning Configuration",
				CHARACTERISTIC_MAPPING_128.get(INDOOR_POSITIONING_CONFIGURATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LATITUDE_CHARACTERISTIC));
		assertEquals("Latitude", CHARACTERISTIC_MAPPING_128.get(LATITUDE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LONGITUDE_CHARACTERISTIC));
		assertEquals("Longitude", CHARACTERISTIC_MAPPING_128.get(LONGITUDE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCAL_NORTH_COORDINATE_CHARACTERISTIC));
		assertEquals("Local North Coordinate", CHARACTERISTIC_MAPPING_128.get(LOCAL_NORTH_COORDINATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCAL_EAST_COORDINATE_CHARACTERISTIC));
		assertEquals("Local East Coordinate", CHARACTERISTIC_MAPPING_128.get(LOCAL_EAST_COORDINATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FLOOR_NUMBER_CHARACTERISTIC));
		assertEquals("Floor Number", CHARACTERISTIC_MAPPING_128.get(FLOOR_NUMBER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALTITUDE_CHARACTERISTIC));
		assertEquals("Altitude", CHARACTERISTIC_MAPPING_128.get(ALTITUDE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UNCERTAINTY_CHARACTERISTIC));
		assertEquals("Uncertainty", CHARACTERISTIC_MAPPING_128.get(UNCERTAINTY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCATION_NAME_CHARACTERISTIC));
		assertEquals("Location Name", CHARACTERISTIC_MAPPING_128.get(LOCATION_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(URI_CHARACTERISTIC));
		assertEquals("URI", CHARACTERISTIC_MAPPING_128.get(URI_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_HEADERS_CHARACTERISTIC));
		assertEquals("HTTP Headers", CHARACTERISTIC_MAPPING_128.get(HTTP_HEADERS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_STATUS_CODE_CHARACTERISTIC));
		assertEquals("HTTP Status Code", CHARACTERISTIC_MAPPING_128.get(HTTP_STATUS_CODE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_ENTITY_BODY_CHARACTERISTIC));
		assertEquals("HTTP Entity Body", CHARACTERISTIC_MAPPING_128.get(HTTP_ENTITY_BODY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("HTTP Control Point", CHARACTERISTIC_MAPPING_128.get(HTTP_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTPS_SECURITY_CHARACTERISTIC));
		assertEquals("HTTPS Security", CHARACTERISTIC_MAPPING_128.get(HTTPS_SECURITY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TDS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("TDS Control Point", CHARACTERISTIC_MAPPING_128.get(TDS_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OTS_FEATURE_CHARACTERISTIC));
		assertEquals("OTS Feature", CHARACTERISTIC_MAPPING_128.get(OTS_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_NAME_CHARACTERISTIC));
		assertEquals("Object Name", CHARACTERISTIC_MAPPING_128.get(OBJECT_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_TYPE_CHARACTERISTIC));
		assertEquals("Object Type", CHARACTERISTIC_MAPPING_128.get(OBJECT_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_SIZE_CHARACTERISTIC));
		assertEquals("Object Size", CHARACTERISTIC_MAPPING_128.get(OBJECT_SIZE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_FIRST_CREATED_CHARACTERISTIC));
		assertEquals("Object First-Created", CHARACTERISTIC_MAPPING_128.get(OBJECT_FIRST_CREATED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_LAST_MODIFIED_CHARACTERISTIC));
		assertEquals("Object Last-Modified", CHARACTERISTIC_MAPPING_128.get(OBJECT_LAST_MODIFIED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_ID_CHARACTERISTIC));
		assertEquals("Object ID", CHARACTERISTIC_MAPPING_128.get(OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_PROPERTIES_CHARACTERISTIC));
		assertEquals("Object Properties", CHARACTERISTIC_MAPPING_128.get(OBJECT_PROPERTIES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_ACTION_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Object Action Control Point",
				CHARACTERISTIC_MAPPING_128.get(OBJECT_ACTION_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_LIST_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Object List Control Point",
				CHARACTERISTIC_MAPPING_128.get(OBJECT_LIST_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_LIST_FILTER_CHARACTERISTIC));
		assertEquals("Object List Filter", CHARACTERISTIC_MAPPING_128.get(OBJECT_LIST_FILTER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_CHANGED_CHARACTERISTIC));
		assertEquals("Object Changed", CHARACTERISTIC_MAPPING_128.get(OBJECT_CHANGED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RESOLVABLE_PRIVATE_ADDRESS_ONLY_CHARACTERISTIC));
		assertEquals("Resolvable Private Address Only",
				CHARACTERISTIC_MAPPING_128.get(RESOLVABLE_PRIVATE_ADDRESS_ONLY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FITNESS_MACHINE_FEATURE_CHARACTERISTIC));
		assertEquals("Fitness Machine Feature", CHARACTERISTIC_MAPPING_128.get(FITNESS_MACHINE_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TREADMILL_DATA_CHARACTERISTIC));
		assertEquals("Treadmill Data", CHARACTERISTIC_MAPPING_128.get(TREADMILL_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CROSS_TRAINER_DATA_CHARACTERISTIC));
		assertEquals("Cross Trainer Data", CHARACTERISTIC_MAPPING_128.get(CROSS_TRAINER_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STEP_CLIMBER_DATA_CHARACTERISTIC));
		assertEquals("Step Climber Data", CHARACTERISTIC_MAPPING_128.get(STEP_CLIMBER_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STAIR_CLIMBER_DATA_CHARACTERISTIC));
		assertEquals("Stair Climber Data", CHARACTERISTIC_MAPPING_128.get(STAIR_CLIMBER_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ROWER_DATA_CHARACTERISTIC));
		assertEquals("Rower Data", CHARACTERISTIC_MAPPING_128.get(ROWER_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INDOOR_BIKE_DATA_CHARACTERISTIC));
		assertEquals("Indoor Bike Data", CHARACTERISTIC_MAPPING_128.get(INDOOR_BIKE_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRAINING_STATUS_CHARACTERISTIC));
		assertEquals("Training Status", CHARACTERISTIC_MAPPING_128.get(TRAINING_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_SPEED_RANGE_CHARACTERISTIC));
		assertEquals("Supported Speed Range", CHARACTERISTIC_MAPPING_128.get(SUPPORTED_SPEED_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_INCLINATION_RANGE_CHARACTERISTIC));
		assertEquals("Supported Inclination Range",
				CHARACTERISTIC_MAPPING_128.get(SUPPORTED_INCLINATION_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_RESISTANCE_LEVEL_RANGE_CHARACTERISTIC));
		assertEquals("Supported Resistance Level Range",
				CHARACTERISTIC_MAPPING_128.get(SUPPORTED_RESISTANCE_LEVEL_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_HEART_RATE_RANGE_CHARACTERISTIC));
		assertEquals("Supported Heart Rate Range",
				CHARACTERISTIC_MAPPING_128.get(SUPPORTED_HEART_RATE_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_POWER_RANGE_CHARACTERISTIC));
		assertEquals("Supported Power Range", CHARACTERISTIC_MAPPING_128.get(SUPPORTED_POWER_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FITNESS_MACHINE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Fitness Machine Control Point",
				CHARACTERISTIC_MAPPING_128.get(FITNESS_MACHINE_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FITNESS_MACHINE_STATUS_CHARACTERISTIC));
		assertEquals("Fitness Machine Status", CHARACTERISTIC_MAPPING_128.get(FITNESS_MACHINE_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROVISIONING_DATA_IN_CHARACTERISTIC));
		assertEquals("Mesh Provisioning Data In",
				CHARACTERISTIC_MAPPING_128.get(MESH_PROVISIONING_DATA_IN_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROVISIONING_DATA_OUT_CHARACTERISTIC));
		assertEquals("Mesh Provisioning Data Out",
				CHARACTERISTIC_MAPPING_128.get(MESH_PROVISIONING_DATA_OUT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROXY_DATA_IN_CHARACTERISTIC));
		assertEquals("Mesh Proxy Data In", CHARACTERISTIC_MAPPING_128.get(MESH_PROXY_DATA_IN_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROXY_DATA_OUT_CHARACTERISTIC));
		assertEquals("Mesh Proxy Data Out", CHARACTERISTIC_MAPPING_128.get(MESH_PROXY_DATA_OUT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AVERAGE_CURRENT_CHARACTERISTIC));
		assertEquals("Average Current", CHARACTERISTIC_MAPPING_128.get(AVERAGE_CURRENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AVERAGE_VOLTAGE_CHARACTERISTIC));
		assertEquals("Average Voltage", CHARACTERISTIC_MAPPING_128.get(AVERAGE_VOLTAGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOLEAN_CHARACTERISTIC));
		assertEquals("Boolean", CHARACTERISTIC_MAPPING_128.get(BOOLEAN_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATIC_DISTANCE_FROM_PLANCKIAN_CHARACTERISTIC));
		assertEquals("Chromatic Distance from Planckian",
				CHARACTERISTIC_MAPPING_128.get(CHROMATIC_DISTANCE_FROM_PLANCKIAN_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_COORDINATES_CHARACTERISTIC));
		assertEquals("Chromaticity Coordinates",
				CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_COORDINATES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_IN_CCT_AND_DUV_VALUES_CHARACTERISTIC));
		assertEquals("Chromaticity in CCT and Duv Values",
				CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_IN_CCT_AND_DUV_VALUES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_TOLERANCE_CHARACTERISTIC));
		assertEquals("Chromaticity Tolerance", CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_TOLERANCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CIE_13_3_1995_COLOR_RENDERING_INDEX_CHARACTERISTIC));
		assertEquals("CIE 13.3-1995 Color Rendering Index",
				CHARACTERISTIC_MAPPING_128.get(CIE_13_3_1995_COLOR_RENDERING_INDEX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COEFFICIENT_CHARACTERISTIC));
		assertEquals("Coefficient", CHARACTERISTIC_MAPPING_128.get(COEFFICIENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CORRELATED_COLOR_TEMPERATURE_CHARACTERISTIC));
		assertEquals("Correlated Color Temperature",
				CHARACTERISTIC_MAPPING_128.get(CORRELATED_COLOR_TEMPERATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COUNT_16_CHARACTERISTIC));
		assertEquals("Count 16", CHARACTERISTIC_MAPPING_128.get(COUNT_16_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COUNT_24_CHARACTERISTIC));
		assertEquals("Count 24", CHARACTERISTIC_MAPPING_128.get(COUNT_24_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COUNTRY_CODE_CHARACTERISTIC));
		assertEquals("Country Code", CHARACTERISTIC_MAPPING_128.get(COUNTRY_CODE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_UTC_CHARACTERISTIC));
		assertEquals("Date UTC", CHARACTERISTIC_MAPPING_128.get(DATE_UTC_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_CHARACTERISTIC));
		assertEquals("Electric Current", CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_RANGE_CHARACTERISTIC));
		assertEquals("Electric Current Range", CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_SPECIFICATION_CHARACTERISTIC));
		assertEquals("Electric Current Specification",
				CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_SPECIFICATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_STATISTICS_CHARACTERISTIC));
		assertEquals("Electric Current Statistics",
				CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_STATISTICS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENERGY_CHARACTERISTIC));
		assertEquals("Energy", CHARACTERISTIC_MAPPING_128.get(ENERGY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENERGY_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertEquals("Energy in a Period of Day",
				CHARACTERISTIC_MAPPING_128.get(ENERGY_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EVENT_STATISTICS_CHARACTERISTIC));
		assertEquals("Event Statistics", CHARACTERISTIC_MAPPING_128.get(EVENT_STATISTICS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_16_CHARACTERISTIC));
		assertEquals("Fixed String 16", CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_16_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_24_CHARACTERISTIC));
		assertEquals("Fixed String 24", CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_24_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_36_CHARACTERISTIC));
		assertEquals("Fixed String 36", CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_36_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_8_CHARACTERISTIC));
		assertEquals("Fixed String 8", CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_8_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENERIC_LEVEL_CHARACTERISTIC));
		assertEquals("Generic Level", CHARACTERISTIC_MAPPING_128.get(GENERIC_LEVEL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLOBAL_TRADE_ITEM_NUMBER_CHARACTERISTIC));
		assertEquals("Global Trade Item Number",
				CHARACTERISTIC_MAPPING_128.get(GLOBAL_TRADE_ITEM_NUMBER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ILLUMINANCE_CHARACTERISTIC));
		assertEquals("Illuminance", CHARACTERISTIC_MAPPING_128.get(ILLUMINANCE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_EFFICACY_CHARACTERISTIC));
		assertEquals("Luminous Efficacy", CHARACTERISTIC_MAPPING_128.get(LUMINOUS_EFFICACY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_ENERGY_CHARACTERISTIC));
		assertEquals("Luminous Energy", CHARACTERISTIC_MAPPING_128.get(LUMINOUS_ENERGY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_EXPOSURE_CHARACTERISTIC));
		assertEquals("Luminous Exposure", CHARACTERISTIC_MAPPING_128.get(LUMINOUS_EXPOSURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_FLUX_CHARACTERISTIC));
		assertEquals("Luminous Flux", CHARACTERISTIC_MAPPING_128.get(LUMINOUS_FLUX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_FLUX_RANGE_CHARACTERISTIC));
		assertEquals("Luminous Flux Range", CHARACTERISTIC_MAPPING_128.get(LUMINOUS_FLUX_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_INTENSITY_CHARACTERISTIC));
		assertEquals("Luminous Intensity", CHARACTERISTIC_MAPPING_128.get(LUMINOUS_INTENSITY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MASS_FLOW_CHARACTERISTIC));
		assertEquals("Mass Flow", CHARACTERISTIC_MAPPING_128.get(MASS_FLOW_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERCEIVED_LIGHTNESS_CHARACTERISTIC));
		assertEquals("Perceived Lightness", CHARACTERISTIC_MAPPING_128.get(PERCEIVED_LIGHTNESS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERCENTAGE_8_CHARACTERISTIC));
		assertEquals("Percentage 8", CHARACTERISTIC_MAPPING_128.get(PERCENTAGE_8_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POWER_CHARACTERISTIC));
		assertEquals("Power", CHARACTERISTIC_MAPPING_128.get(POWER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POWER_SPECIFICATION_CHARACTERISTIC));
		assertEquals("Power Specification", CHARACTERISTIC_MAPPING_128.get(POWER_SPECIFICATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_RUNTIME_IN_A_CURRENT_RANGE_CHARACTERISTIC));
		assertEquals("Relative Runtime in a Current Range",
				CHARACTERISTIC_MAPPING_128.get(RELATIVE_RUNTIME_IN_A_CURRENT_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_RUNTIME_IN_A_GENERIC_LEVEL_RANGE_CHARACTERISTIC));
		assertEquals("Relative Runtime in a Generic Level Range",
				CHARACTERISTIC_MAPPING_128.get(RELATIVE_RUNTIME_IN_A_GENERIC_LEVEL_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_A_VOLTAGE_RANGE_CHARACTERISTIC));
		assertEquals("Relative Value in a Voltage Range",
				CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_A_VOLTAGE_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_AN_ILLUMINANCE_RANGE_CHARACTERISTIC));
		assertEquals("Relative Value in an Illuminance Range",
				CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_AN_ILLUMINANCE_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertEquals("Relative Value in a Period of Day",
				CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_A_TEMPERATURE_RANGE_CHARACTERISTIC));
		assertEquals("Relative Value in a Temperature Range",
				CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_A_TEMPERATURE_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_8_CHARACTERISTIC));
		assertEquals("Temperature 8", CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_8_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_8_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertEquals("Temperature 8 in a Period of Day",
				CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_8_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_8_STATISTICS_CHARACTERISTIC));
		assertEquals("Temperature 8 Statistics",
				CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_8_STATISTICS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_RANGE_CHARACTERISTIC));
		assertEquals("Temperature Range", CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_STATISTICS_CHARACTERISTIC));
		assertEquals("Temperature Statistics", CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_STATISTICS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_DECIHOUR_8_CHARACTERISTIC));
		assertEquals("Time Decihour 8", CHARACTERISTIC_MAPPING_128.get(TIME_DECIHOUR_8_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_EXPONENTIAL_8_CHARACTERISTIC));
		assertEquals("Time Exponential 8", CHARACTERISTIC_MAPPING_128.get(TIME_EXPONENTIAL_8_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_HOUR_24_CHARACTERISTIC));
		assertEquals("Time Hour 24", CHARACTERISTIC_MAPPING_128.get(TIME_HOUR_24_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_MILLISECOND_24_CHARACTERISTIC));
		assertEquals("Time Millisecond 24", CHARACTERISTIC_MAPPING_128.get(TIME_MILLISECOND_24_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SECOND_16_CHARACTERISTIC));
		assertEquals("Time Second 16", CHARACTERISTIC_MAPPING_128.get(TIME_SECOND_16_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SECOND_8_CHARACTERISTIC));
		assertEquals("Time Second 8", CHARACTERISTIC_MAPPING_128.get(TIME_SECOND_8_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_CHARACTERISTIC));
		assertEquals("Voltage", CHARACTERISTIC_MAPPING_128.get(VOLTAGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_SPECIFICATION_CHARACTERISTIC));
		assertEquals("Voltage Specification", CHARACTERISTIC_MAPPING_128.get(VOLTAGE_SPECIFICATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_STATISTICS_CHARACTERISTIC));
		assertEquals("Voltage Statistics", CHARACTERISTIC_MAPPING_128.get(VOLTAGE_STATISTICS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_FLOW_CHARACTERISTIC));
		assertEquals("Volume Flow", CHARACTERISTIC_MAPPING_128.get(VOLUME_FLOW_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_COORDINATE_CHARACTERISTIC));
		assertEquals("Chromaticity Coordinate", CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_COORDINATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RC_FEATURE_CHARACTERISTIC));
		assertEquals("RC Feature", CHARACTERISTIC_MAPPING_128.get(RC_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RC_SETTINGS_CHARACTERISTIC));
		assertEquals("RC Settings", CHARACTERISTIC_MAPPING_128.get(RC_SETTINGS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RECONNECTION_CONFIGURATION_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Reconnection Configuration Control Point",
				CHARACTERISTIC_MAPPING_128.get(RECONNECTION_CONFIGURATION_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_STATUS_CHANGED_CHARACTERISTIC));
		assertEquals("IDD Status Changed", CHARACTERISTIC_MAPPING_128.get(IDD_STATUS_CHANGED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_STATUS_CHARACTERISTIC));
		assertEquals("IDD Status", CHARACTERISTIC_MAPPING_128.get(IDD_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_ANNUNCIATION_STATUS_CHARACTERISTIC));
		assertEquals("IDD Annunciation Status", CHARACTERISTIC_MAPPING_128.get(IDD_ANNUNCIATION_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_FEATURES_CHARACTERISTIC));
		assertEquals("IDD Features", CHARACTERISTIC_MAPPING_128.get(IDD_FEATURES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_STATUS_READER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("IDD Status Reader Control Point",
				CHARACTERISTIC_MAPPING_128.get(IDD_STATUS_READER_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_COMMAND_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("IDD Command Control Point",
				CHARACTERISTIC_MAPPING_128.get(IDD_COMMAND_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_COMMAND_DATA_CHARACTERISTIC));
		assertEquals("IDD Command Data", CHARACTERISTIC_MAPPING_128.get(IDD_COMMAND_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("IDD Record Access Control Point",
				CHARACTERISTIC_MAPPING_128.get(IDD_RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_HISTORY_DATA_CHARACTERISTIC));
		assertEquals("IDD History Data", CHARACTERISTIC_MAPPING_128.get(IDD_HISTORY_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CLIENT_SUPPORTED_FEATURES_CHARACTERISTIC));
		assertEquals("Client Supported Features",
				CHARACTERISTIC_MAPPING_128.get(CLIENT_SUPPORTED_FEATURES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATABASE_HASH_CHARACTERISTIC));
		assertEquals("Database Hash", CHARACTERISTIC_MAPPING_128.get(DATABASE_HASH_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BSS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("BSS Control Point", CHARACTERISTIC_MAPPING_128.get(BSS_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BSS_RESPONSE_CHARACTERISTIC));
		assertEquals("BSS Response", CHARACTERISTIC_MAPPING_128.get(BSS_RESPONSE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EMERGENCY_ID_CHARACTERISTIC));
		assertEquals("Emergency ID", CHARACTERISTIC_MAPPING_128.get(EMERGENCY_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EMERGENCY_TEXT_CHARACTERISTIC));
		assertEquals("Emergency Text", CHARACTERISTIC_MAPPING_128.get(EMERGENCY_TEXT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACS_STATUS_CHARACTERISTIC));
		assertEquals("ACS Status", CHARACTERISTIC_MAPPING_128.get(ACS_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACS_DATA_IN_CHARACTERISTIC));
		assertEquals("ACS Data In", CHARACTERISTIC_MAPPING_128.get(ACS_DATA_IN_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(A_C_S_DATA_OUT_NOTIFY_CHARACTERISTIC));
		assertEquals("ACS Data Out Notify", CHARACTERISTIC_MAPPING_128.get(A_C_S_DATA_OUT_NOTIFY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACS_DATA_OUT_INDICATE_CHARACTERISTIC));
		assertEquals("ACS Data Out Indicate", CHARACTERISTIC_MAPPING_128.get(ACS_DATA_OUT_INDICATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("ACS Control Point", CHARACTERISTIC_MAPPING_128.get(ACS_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENHANCED_BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC));
		assertEquals("Enhanced Blood Pressure Measurement",
				CHARACTERISTIC_MAPPING_128.get(ENHANCED_BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENHANCED_INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC));
		assertEquals("Enhanced Intermediate Cuff Pressure",
				CHARACTERISTIC_MAPPING_128.get(ENHANCED_INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLOOD_PRESSURE_RECORD_CHARACTERISTIC));
		assertEquals("Blood Pressure Record", CHARACTERISTIC_MAPPING_128.get(BLOOD_PRESSURE_RECORD_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REGISTERED_USER_CHARACTERISTIC));
		assertEquals("Registered User", CHARACTERISTIC_MAPPING_128.get(REGISTERED_USER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BR_EDR_HANDOVER_DATA_CHARACTERISTIC));
		assertEquals("BR-EDR Handover Data", CHARACTERISTIC_MAPPING_128.get(BR_EDR_HANDOVER_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLUETOOTH_SIG_DATA_CHARACTERISTIC));
		assertEquals("Bluetooth SIG Data", CHARACTERISTIC_MAPPING_128.get(BLUETOOTH_SIG_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SERVER_SUPPORTED_FEATURES_CHARACTERISTIC));
		assertEquals("Server Supported Features",
				CHARACTERISTIC_MAPPING_128.get(SERVER_SUPPORTED_FEATURES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PHYSICAL_ACTIVITY_MONITOR_FEATURES_CHARACTERISTIC));
		assertEquals("Physical Activity Monitor Features",
				CHARACTERISTIC_MAPPING_128.get(PHYSICAL_ACTIVITY_MONITOR_FEATURES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENERAL_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertEquals("General Activity Instantaneous Data",
				CHARACTERISTIC_MAPPING_128.get(GENERAL_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENERAL_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals("General Activity Summary Data",
				CHARACTERISTIC_MAPPING_128.get(GENERAL_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertTrue(
				CHARACTERISTIC_MAPPING_128.containsKey(CARDIO_RESPIRATORY_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertEquals("CardioRespiratory Activity Instantaneous Data",
				CHARACTERISTIC_MAPPING_128.get(CARDIO_RESPIRATORY_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CARDIO_RESPIRATORY_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals("CardioRespiratory Activity Summary Data",
				CHARACTERISTIC_MAPPING_128.get(CARDIO_RESPIRATORY_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STEP_COUNTER_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals("Step Counter Activity Summary Data",
				CHARACTERISTIC_MAPPING_128.get(STEP_COUNTER_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SLEEP_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertEquals("Sleep Activity Instantaneous Data",
				CHARACTERISTIC_MAPPING_128.get(SLEEP_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SLEEP_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals("Sleep Activity Summary Data",
				CHARACTERISTIC_MAPPING_128.get(SLEEP_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PHYSICAL_ACTIVITY_MONITOR_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Physical Activity Monitor Control Point",
				CHARACTERISTIC_MAPPING_128.get(PHYSICAL_ACTIVITY_MONITOR_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACTIVITY_CURRENT_SESSION_CHARACTERISTIC));
		assertEquals("Activity Current Session",
				CHARACTERISTIC_MAPPING_128.get(ACTIVITY_CURRENT_SESSION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PHYSICAL_ACTIVITY_SESSION_DESCRIPTOR_CHARACTERISTIC));
		assertEquals("Physical Activity Session Descriptor",
				CHARACTERISTIC_MAPPING_128.get(PHYSICAL_ACTIVITY_SESSION_DESCRIPTOR_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PREFERRED_UNITS_CHARACTERISTIC));
		assertEquals("Preferred Units", CHARACTERISTIC_MAPPING_128.get(PREFERRED_UNITS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIGH_RESOLUTION_HEIGHT_CHARACTERISTIC));
		assertEquals("High Resolution Height", CHARACTERISTIC_MAPPING_128.get(HIGH_RESOLUTION_HEIGHT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MIDDLE_NAME_CHARACTERISTIC));
		assertEquals("Middle Name", CHARACTERISTIC_MAPPING_128.get(MIDDLE_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STRIDE_LENGTH_CHARACTERISTIC));
		assertEquals("Stride Length", CHARACTERISTIC_MAPPING_128.get(STRIDE_LENGTH_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HANDEDNESS_CHARACTERISTIC));
		assertEquals("Handedness", CHARACTERISTIC_MAPPING_128.get(HANDEDNESS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_WEARING_POSITION_CHARACTERISTIC));
		assertEquals("Device Wearing Position", CHARACTERISTIC_MAPPING_128.get(DEVICE_WEARING_POSITION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FOUR_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals("Four Zone Heart Rate Limits",
				CHARACTERISTIC_MAPPING_128.get(FOUR_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIGH_INTENSITY_EXERCISE_THRESHOLD_CHARACTERISTIC));
		assertEquals("High Intensity Exercise Threshold",
				CHARACTERISTIC_MAPPING_128.get(HIGH_INTENSITY_EXERCISE_THRESHOLD_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACTIVITY_GOAL_CHARACTERISTIC));
		assertEquals("Activity Goal", CHARACTERISTIC_MAPPING_128.get(ACTIVITY_GOAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEDENTARY_INTERVAL_NOTIFICATION_CHARACTERISTIC));
		assertEquals("Sedentary Interval Notification",
				CHARACTERISTIC_MAPPING_128.get(SEDENTARY_INTERVAL_NOTIFICATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALORIC_INTAKE_CHARACTERISTIC));
		assertEquals("Caloric Intake", CHARACTERISTIC_MAPPING_128.get(CALORIC_INTAKE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TMAP_ROLE_CHARACTERISTIC));
		assertEquals("TMAP Role", CHARACTERISTIC_MAPPING_128.get(TMAP_ROLE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_STATE_CHARACTERISTIC));
		assertEquals("Audio Input State", CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GAIN_SETTINGS_ATTRIBUTE_CHARACTERISTIC));
		assertEquals("Gain Settings Attribute", CHARACTERISTIC_MAPPING_128.get(GAIN_SETTINGS_ATTRIBUTE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_TYPE_CHARACTERISTIC));
		assertEquals("Audio Input Type", CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_STATUS_CHARACTERISTIC));
		assertEquals("Audio Input Status", CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Audio Input Control Point",
				CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_DESCRIPTION_CHARACTERISTIC));
		assertEquals("Audio Input Description", CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_DESCRIPTION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_STATE_CHARACTERISTIC));
		assertEquals("Volume State", CHARACTERISTIC_MAPPING_128.get(VOLUME_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Volume Control Point", CHARACTERISTIC_MAPPING_128.get(VOLUME_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_FLAGS_CHARACTERISTIC));
		assertEquals("Volume Flags", CHARACTERISTIC_MAPPING_128.get(VOLUME_FLAGS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_OFFSET_STATE_CHARACTERISTIC));
		assertEquals("Volume Offset State", CHARACTERISTIC_MAPPING_128.get(VOLUME_OFFSET_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_LOCATION_CHARACTERISTIC));
		assertEquals("Audio Location", CHARACTERISTIC_MAPPING_128.get(AUDIO_LOCATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_OFFSET_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Volume Offset Control Point",
				CHARACTERISTIC_MAPPING_128.get(VOLUME_OFFSET_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_OUTPUT_DESCRIPTION_CHARACTERISTIC));
		assertEquals("Audio Output Description",
				CHARACTERISTIC_MAPPING_128.get(AUDIO_OUTPUT_DESCRIPTION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SET_IDENTITY_RESOLVING_KEY_CHARACTERISTIC));
		assertEquals("Set Identity Resolving Key",
				CHARACTERISTIC_MAPPING_128.get(SET_IDENTITY_RESOLVING_KEY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COORDINATED_SET_SIZE_CHARACTERISTIC));
		assertEquals("Coordinated Set Size", CHARACTERISTIC_MAPPING_128.get(COORDINATED_SET_SIZE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SET_MEMBER_LOCK_CHARACTERISTIC));
		assertEquals("Set Member Lock", CHARACTERISTIC_MAPPING_128.get(SET_MEMBER_LOCK_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SET_MEMBER_RANK_CHARACTERISTIC));
		assertEquals("Set Member Rank", CHARACTERISTIC_MAPPING_128.get(SET_MEMBER_RANK_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENCRYPTED_DATA_KEY_MATERIAL_CHARACTERISTIC));
		assertEquals("Encrypted Data Key Material",
				CHARACTERISTIC_MAPPING_128.get(ENCRYPTED_DATA_KEY_MATERIAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPARENT_ENERGY_32_CHARACTERISTIC));
		assertEquals("Apparent Energy 32", CHARACTERISTIC_MAPPING_128.get(APPARENT_ENERGY_32_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPARENT_POWER_CHARACTERISTIC));
		assertEquals("Apparent Power", CHARACTERISTIC_MAPPING_128.get(APPARENT_POWER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CO2_CONCENTRATION_CHARACTERISTIC));
		assertEquals("CO2 Concentration", CHARACTERISTIC_MAPPING_128.get(CO2_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COSINE_OF_THE_ANGLE_CHARACTERISTIC));
		assertEquals("Cosine of the Angle", CHARACTERISTIC_MAPPING_128.get(COSINE_OF_THE_ANGLE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_FEATURE_CHARACTERISTIC));
		assertEquals("Device Time Feature", CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_FEATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_PARAMETERS_CHARACTERISTIC));
		assertEquals("Device Time Parameters", CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_PARAMETERS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_CHARACTERISTIC));
		assertEquals("Device Time", CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Device Time Control Point",
				CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_CHANGE_LOG_DATA_CHARACTERISTIC));
		assertEquals("Time Change Log Data", CHARACTERISTIC_MAPPING_128.get(TIME_CHANGE_LOG_DATA_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_NAME_CHARACTERISTIC));
		assertEquals("Media Player Name", CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_ICON_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Media Player Icon Object ID",
				CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_ICON_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_ICON_URL_CHARACTERISTIC));
		assertEquals("Media Player Icon URL", CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_ICON_URL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_CHANGED_CHARACTERISTIC));
		assertEquals("Track Changed", CHARACTERISTIC_MAPPING_128.get(TRACK_CHANGED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_TITLE_CHARACTERISTIC));
		assertEquals("Track Title", CHARACTERISTIC_MAPPING_128.get(TRACK_TITLE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_DURATION_CHARACTERISTIC));
		assertEquals("Track Duration", CHARACTERISTIC_MAPPING_128.get(TRACK_DURATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_POSITION_CHARACTERISTIC));
		assertEquals("Track Position", CHARACTERISTIC_MAPPING_128.get(TRACK_POSITION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLAYBACK_SPEED_CHARACTERISTIC));
		assertEquals("Playback Speed", CHARACTERISTIC_MAPPING_128.get(PLAYBACK_SPEED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEEKING_SPEED_CHARACTERISTIC));
		assertEquals("Seeking Speed", CHARACTERISTIC_MAPPING_128.get(SEEKING_SPEED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_TRACK_SEGMENTS_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Current Track Segments Object ID",
				CHARACTERISTIC_MAPPING_128.get(CURRENT_TRACK_SEGMENTS_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_TRACK_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Current Track Object ID", CHARACTERISTIC_MAPPING_128.get(CURRENT_TRACK_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NEXT_TRACK_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Next Track Object ID", CHARACTERISTIC_MAPPING_128.get(NEXT_TRACK_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARENT_GROUP_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Parent Group Object ID", CHARACTERISTIC_MAPPING_128.get(PARENT_GROUP_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_GROUP_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Current Group Object ID", CHARACTERISTIC_MAPPING_128.get(CURRENT_GROUP_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLAYING_ORDER_CHARACTERISTIC));
		assertEquals("Playing Order", CHARACTERISTIC_MAPPING_128.get(PLAYING_ORDER_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLAYING_ORDERS_SUPPORTED_CHARACTERISTIC));
		assertEquals("Playing Orders Supported",
				CHARACTERISTIC_MAPPING_128.get(PLAYING_ORDERS_SUPPORTED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_STATE_CHARACTERISTIC));
		assertEquals("Media State", CHARACTERISTIC_MAPPING_128.get(MEDIA_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Media Control Point", CHARACTERISTIC_MAPPING_128.get(MEDIA_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_CONTROL_POINT_OPCODES_SUPPORTED_CHARACTERISTIC));
		assertEquals("Media Control Point Opcodes Supported",
				CHARACTERISTIC_MAPPING_128.get(MEDIA_CONTROL_POINT_OPCODES_SUPPORTED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEARCH_RESULTS_OBJECT_ID_CHARACTERISTIC));
		assertEquals("Search Results Object ID",
				CHARACTERISTIC_MAPPING_128.get(SEARCH_RESULTS_OBJECT_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEARCH_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Search Control Point", CHARACTERISTIC_MAPPING_128.get(SEARCH_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENERGY_32_CHARACTERISTIC));
		assertEquals("Energy 32", CHARACTERISTIC_MAPPING_128.get(ENERGY_32_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_ICON_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals("Media Player Icon Object Type",
				CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_ICON_OBJECT_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_SEGMENTS_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals("Track Segments Object Type",
				CHARACTERISTIC_MAPPING_128.get(TRACK_SEGMENTS_OBJECT_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals("Track Object Type", CHARACTERISTIC_MAPPING_128.get(TRACK_OBJECT_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GROUP_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals("Group Object Type", CHARACTERISTIC_MAPPING_128.get(GROUP_OBJECT_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CONSTANT_TONE_EXTENSION_ENABLE_CHARACTERISTIC));
		assertEquals("Constant Tone Extension Enable",
				CHARACTERISTIC_MAPPING_128.get(CONSTANT_TONE_EXTENSION_ENABLE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128
				.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_LENGTH_CHARACTERISTIC));
		assertEquals("Advertising Constant Tone Extension Minimum Length",
				CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_LENGTH_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128
				.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_TRANSMIT_COUNT_CHARACTERISTIC));
		assertEquals("Advertising Constant Tone Extension Minimum Transmit Count", CHARACTERISTIC_MAPPING_128
				.get(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_TRANSMIT_COUNT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128
				.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_TRANSMIT_DURATION_CHARACTERISTIC));
		assertEquals("Advertising Constant Tone Extension Transmit Duration",
				CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_TRANSMIT_DURATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_INTERVAL_CHARACTERISTIC));
		assertEquals("Advertising Constant Tone Extension Interval",
				CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_INTERVAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_PHY_CHARACTERISTIC));
		assertEquals("Advertising Constant Tone Extension PHY",
				CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_PHY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_PROVIDER_NAME_CHARACTERISTIC));
		assertEquals("Bearer Provider Name", CHARACTERISTIC_MAPPING_128.get(BEARER_PROVIDER_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_UCI_CHARACTERISTIC));
		assertEquals("Bearer UCI", CHARACTERISTIC_MAPPING_128.get(BEARER_UCI_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_TECHNOLOGY_CHARACTERISTIC));
		assertEquals("Bearer Technology", CHARACTERISTIC_MAPPING_128.get(BEARER_TECHNOLOGY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_URI_SCHEMES_SUPPORTED_LIST_CHARACTERISTIC));
		assertEquals("Bearer URI Schemes Supported List",
				CHARACTERISTIC_MAPPING_128.get(BEARER_URI_SCHEMES_SUPPORTED_LIST_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_SIGNAL_STRENGTH_CHARACTERISTIC));
		assertEquals("Bearer Signal Strength", CHARACTERISTIC_MAPPING_128.get(BEARER_SIGNAL_STRENGTH_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_SIGNAL_STRENGTH_REPORTING_INTERVAL_CHARACTERISTIC));
		assertEquals("Bearer Signal Strength Reporting Interval",
				CHARACTERISTIC_MAPPING_128.get(BEARER_SIGNAL_STRENGTH_REPORTING_INTERVAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_LIST_CURRENT_CALLS_CHARACTERISTIC));
		assertEquals("Bearer List Current Calls",
				CHARACTERISTIC_MAPPING_128.get(BEARER_LIST_CURRENT_CALLS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CONTENT_CONTROL_ID_CHARACTERISTIC));
		assertEquals("Content Control ID", CHARACTERISTIC_MAPPING_128.get(CONTENT_CONTROL_ID_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STATUS_FLAGS_CHARACTERISTIC));
		assertEquals("Status Flags", CHARACTERISTIC_MAPPING_128.get(STATUS_FLAGS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INCOMING_CALL_TARGET_BEARER_URI_CHARACTERISTIC));
		assertEquals("Incoming Call Target Bearer URI",
				CHARACTERISTIC_MAPPING_128.get(INCOMING_CALL_TARGET_BEARER_URI_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_STATE_CHARACTERISTIC));
		assertEquals("Call State", CHARACTERISTIC_MAPPING_128.get(CALL_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Call Control Point", CHARACTERISTIC_MAPPING_128.get(CALL_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_CONTROL_POINT_OPTIONAL_OPCODES_CHARACTERISTIC));
		assertEquals("Call Control Point Optional Opcodes",
				CHARACTERISTIC_MAPPING_128.get(CALL_CONTROL_POINT_OPTIONAL_OPCODES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TERMINATION_REASON_CHARACTERISTIC));
		assertEquals("Termination Reason", CHARACTERISTIC_MAPPING_128.get(TERMINATION_REASON_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INCOMING_CALL_CHARACTERISTIC));
		assertEquals("Incoming Call", CHARACTERISTIC_MAPPING_128.get(INCOMING_CALL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_FRIENDLY_NAME_CHARACTERISTIC));
		assertEquals("Call Friendly Name", CHARACTERISTIC_MAPPING_128.get(CALL_FRIENDLY_NAME_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MUTE_CHARACTERISTIC));
		assertEquals("Mute", CHARACTERISTIC_MAPPING_128.get(MUTE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SINK_ASE_CHARACTERISTIC));
		assertEquals("Sink ASE", CHARACTERISTIC_MAPPING_128.get(SINK_ASE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOURCE_ASE_CHARACTERISTIC));
		assertEquals("Source ASE", CHARACTERISTIC_MAPPING_128.get(SOURCE_ASE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ASE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("ASE Control Point", CHARACTERISTIC_MAPPING_128.get(ASE_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BROADCAST_AUDIO_SCAN_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Broadcast Audio Scan Control Point",
				CHARACTERISTIC_MAPPING_128.get(BROADCAST_AUDIO_SCAN_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BROADCAST_RECEIVE_STATE_CHARACTERISTIC));
		assertEquals("Broadcast Receive State", CHARACTERISTIC_MAPPING_128.get(BROADCAST_RECEIVE_STATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SINK_PAC_CHARACTERISTIC));
		assertEquals("Sink PAC", CHARACTERISTIC_MAPPING_128.get(SINK_PAC_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SINK_AUDIO_LOCATIONS_CHARACTERISTIC));
		assertEquals("Sink Audio Locations", CHARACTERISTIC_MAPPING_128.get(SINK_AUDIO_LOCATIONS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOURCE_PAC_CHARACTERISTIC));
		assertEquals("Source PAC", CHARACTERISTIC_MAPPING_128.get(SOURCE_PAC_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOURCE_AUDIO_LOCATIONS_CHARACTERISTIC));
		assertEquals("Source Audio Locations", CHARACTERISTIC_MAPPING_128.get(SOURCE_AUDIO_LOCATIONS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AVAILABLE_AUDIO_CONTEXTS_CHARACTERISTIC));
		assertEquals("Available Audio Contexts",
				CHARACTERISTIC_MAPPING_128.get(AVAILABLE_AUDIO_CONTEXTS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_AUDIO_CONTEXTS_CHARACTERISTIC));
		assertEquals("Supported Audio Contexts",
				CHARACTERISTIC_MAPPING_128.get(SUPPORTED_AUDIO_CONTEXTS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AMMONIA_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Ammonia Concentration", CHARACTERISTIC_MAPPING_128.get(AMMONIA_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CARBON_MONOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Carbon Monoxide Concentration",
				CHARACTERISTIC_MAPPING_128.get(CARBON_MONOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(METHANE_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Methane Concentration", CHARACTERISTIC_MAPPING_128.get(METHANE_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NITROGEN_DIOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Nitrogen Dioxide Concentration",
				CHARACTERISTIC_MAPPING_128.get(NITROGEN_DIOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128
				.containsKey(NON_METHANE_VOLATILE_ORGANIC_COMPOUNDS_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Non-Methane Volatile Organic Compounds Concentration",
				CHARACTERISTIC_MAPPING_128.get(NON_METHANE_VOLATILE_ORGANIC_COMPOUNDS_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OZONE_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Ozone Concentration", CHARACTERISTIC_MAPPING_128.get(OZONE_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARTICULATE_MATTER_PM1_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Particulate Matter - PM1 Concentration",
				CHARACTERISTIC_MAPPING_128.get(PARTICULATE_MATTER_PM1_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARTICULATE_MATTER_PM25_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Particulate Matter - PM2.5 Concentration",
				CHARACTERISTIC_MAPPING_128.get(PARTICULATE_MATTER_PM25_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARTICULATE_MATTER_PM10_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Particulate Matter - PM10 Concentration",
				CHARACTERISTIC_MAPPING_128.get(PARTICULATE_MATTER_PM10_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SULFUR_DIOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Sulfur Dioxide Concentration",
				CHARACTERISTIC_MAPPING_128.get(SULFUR_DIOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SULFUR_HEXAFLUORIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals("Sulfur Hexafluoride Concentration",
				CHARACTERISTIC_MAPPING_128.get(SULFUR_HEXAFLUORIDE_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEARING_AID_FEATURES_CHARACTERISTIC));
		assertEquals("Hearing Aid Features", CHARACTERISTIC_MAPPING_128.get(HEARING_AID_FEATURES_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEARING_AID_PRESET_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("Hearing Aid Preset Control Point",
				CHARACTERISTIC_MAPPING_128.get(HEARING_AID_PRESET_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACTIVE_PRESET_INDEX_CHARACTERISTIC));
		assertEquals("Active Preset Index", CHARACTERISTIC_MAPPING_128.get(ACTIVE_PRESET_INDEX_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_64_CHARACTERISTIC));
		assertEquals("Fixed String 64", CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_64_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIGH_TEMPERATURE_CHARACTERISTIC));
		assertEquals("High Temperature", CHARACTERISTIC_MAPPING_128.get(HIGH_TEMPERATURE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIGH_VOLTAGE_CHARACTERISTIC));
		assertEquals("High Voltage", CHARACTERISTIC_MAPPING_128.get(HIGH_VOLTAGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LIGHT_DISTRIBUTION_CHARACTERISTIC));
		assertEquals("Light Distribution", CHARACTERISTIC_MAPPING_128.get(LIGHT_DISTRIBUTION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LIGHT_OUTPUT_CHARACTERISTIC));
		assertEquals("Light Output", CHARACTERISTIC_MAPPING_128.get(LIGHT_OUTPUT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LIGHT_SOURCE_TYPE_CHARACTERISTIC));
		assertEquals("Light Source Type", CHARACTERISTIC_MAPPING_128.get(LIGHT_SOURCE_TYPE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NOISE_CHARACTERISTIC));
		assertEquals("Noise", CHARACTERISTIC_MAPPING_128.get(NOISE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128
				.containsKey(RELATIVE_RUNTIME_IN_A_CORRELATED_COLOR_TEMPERATURE_RANGE_CHARACTERISTIC));
		assertEquals("Relative Runtime in a Correlated Color Temperature Range", CHARACTERISTIC_MAPPING_128
				.get(RELATIVE_RUNTIME_IN_A_CORRELATED_COLOR_TEMPERATURE_RANGE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SECOND_32_CHARACTERISTIC));
		assertEquals("Time Second 32", CHARACTERISTIC_MAPPING_128.get(TIME_SECOND_32_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOC_CONCENTRATION_CHARACTERISTIC));
		assertEquals("VOC Concentration", CHARACTERISTIC_MAPPING_128.get(VOC_CONCENTRATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_FREQUENCY_CHARACTERISTIC));
		assertEquals("Voltage Frequency", CHARACTERISTIC_MAPPING_128.get(VOLTAGE_FREQUENCY_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_CRITICAL_STATUS_CHARACTERISTIC));
		assertEquals("Battery Critical Status", CHARACTERISTIC_MAPPING_128.get(BATTERY_CRITICAL_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_HEALTH_STATUS_CHARACTERISTIC));
		assertEquals("Battery Health Status", CHARACTERISTIC_MAPPING_128.get(BATTERY_HEALTH_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_HEALTH_INFORMATION_CHARACTERISTIC));
		assertEquals("Battery Health Information",
				CHARACTERISTIC_MAPPING_128.get(BATTERY_HEALTH_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_INFORMATION_CHARACTERISTIC));
		assertEquals("Battery Information", CHARACTERISTIC_MAPPING_128.get(BATTERY_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_LEVEL_STATUS_CHARACTERISTIC));
		assertEquals("Battery Level Status", CHARACTERISTIC_MAPPING_128.get(BATTERY_LEVEL_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_TIME_STATUS_CHARACTERISTIC));
		assertEquals("Battery Time Status", CHARACTERISTIC_MAPPING_128.get(BATTERY_TIME_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESTIMATED_SERVICE_DATE_CHARACTERISTIC));
		assertEquals("Estimated Service Date", CHARACTERISTIC_MAPPING_128.get(ESTIMATED_SERVICE_DATE_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_ENERGY_STATUS_CHARACTERISTIC));
		assertEquals("Battery Energy Status", CHARACTERISTIC_MAPPING_128.get(BATTERY_ENERGY_STATUS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LE_GATT_SECURITY_LEVELS_CHARACTERISTIC));
		assertEquals("LE GATT Security Levels", CHARACTERISTIC_MAPPING_128.get(LE_GATT_SECURITY_LEVELS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_ADDRESS_CHARACTERISTIC));
		assertEquals("ESL Address", CHARACTERISTIC_MAPPING_128.get(ESL_ADDRESS_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AP_SYNC_KEY_MATERIAL_CHARACTERISTIC));
		assertEquals("AP Sync Key Material", CHARACTERISTIC_MAPPING_128.get(AP_SYNC_KEY_MATERIAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_RESPONSE_KEY_MATERIAL_CHARACTERISTIC));
		assertEquals("ESL Response Key Material",
				CHARACTERISTIC_MAPPING_128.get(ESL_RESPONSE_KEY_MATERIAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("ESL Control Point", CHARACTERISTIC_MAPPING_128.get(ESL_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_DISPLAY_INFORMATION_CHARACTERISTIC));
		assertEquals("ESL Display Information", CHARACTERISTIC_MAPPING_128.get(ESL_DISPLAY_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_IMAGE_INFORMATION_CHARACTERISTIC));
		assertEquals("ESL Image Information", CHARACTERISTIC_MAPPING_128.get(ESL_IMAGE_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_SENSOR_INFORMATION_CHARACTERISTIC));
		assertEquals("ESL Sensor Information", CHARACTERISTIC_MAPPING_128.get(ESL_SENSOR_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ESL_LED_INFORMATION_CHARACTERISTIC));
		assertEquals("ESL LED Information", CHARACTERISTIC_MAPPING_128.get(ESL_LED_INFORMATION_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(E_S_L_CONTROL_POINT_CHARACTERISTIC));
		assertEquals("ESL Control Point", CHARACTERISTIC_MAPPING_128.get(E_S_L_CONTROL_POINT_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DIGITAL_CHARACTERISTIC));
		assertEquals("Digital", CHARACTERISTIC_MAPPING_128.get(DIGITAL_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANALOG_CHARACTERISTIC));
		assertEquals("Analog", CHARACTERISTIC_MAPPING_128.get(ANALOG_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UNSPECIFIED_CHARACTERISTIC));
		assertEquals("Unspecified", CHARACTERISTIC_MAPPING_128.get(UNSPECIFIED_CHARACTERISTIC));
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DIRECTORY_LISTING_CHARACTERISTIC));
		assertEquals("Directory Listing", CHARACTERISTIC_MAPPING_128.get(DIRECTORY_LISTING_CHARACTERISTIC));
	}

}