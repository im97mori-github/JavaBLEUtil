package org.im97mori.ble.constants;

import static org.im97mori.ble.constants.CharacteristicUUID.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class CharacteristicUUIDTest {

	@Test
	public void test_map_00001() {
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEVICE_NAME_CHARACTERISTIC), "Device Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPEARANCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(APPEARANCE_CHARACTERISTIC), "Appearance");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERIPHERAL_PRIVACY_FLAG_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PERIPHERAL_PRIVACY_FLAG_CHARACTERISTIC), "Peripheral Privacy Flag");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RECONNECTION_ADDRESS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RECONNECTION_ADDRESS_CHARACTERISTIC), "Reconnection Address");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_CHARACTERISTIC), "Peripheral Preferred Connection Parameters");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SERVICE_CHANGED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SERVICE_CHANGED_CHARACTERISTIC), "Service Changed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_LEVEL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ALERT_LEVEL_CHARACTERISTIC), "Alert Level");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TX_POWER_LEVEL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TX_POWER_LEVEL_CHARACTERISTIC), "Tx Power Level");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_TIME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DATE_TIME_CHARACTERISTIC), "Date Time");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DAY_OF_WEEK_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DAY_OF_WEEK_CHARACTERISTIC), "Day of Week");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DAY_DATE_TIME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DAY_DATE_TIME_CHARACTERISTIC), "Day Date Time");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EXACT_TIME_256_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(EXACT_TIME_256_CHARACTERISTIC), "Exact Time 256");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DST_OFFSET_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DST_OFFSET_CHARACTERISTIC), "DST Offset");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_ZONE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_ZONE_CHARACTERISTIC), "Time Zone");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCAL_TIME_INFORMATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LOCAL_TIME_INFORMATION_CHARACTERISTIC), "Local Time Information");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_WITH_DST_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_WITH_DST_CHARACTERISTIC), "Time with DST");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_ACCURACY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_ACCURACY_CHARACTERISTIC), "Time Accuracy");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SOURCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_SOURCE_CHARACTERISTIC), "Time Source");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REFERENCE_TIME_INFORMATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(REFERENCE_TIME_INFORMATION_CHARACTERISTIC), "Reference Time Information");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_UPDATE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_UPDATE_CONTROL_POINT_CHARACTERISTIC), "Time Update Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_UPDATE_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_UPDATE_STATE_CHARACTERISTIC), "Time Update State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLUCOSE_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GLUCOSE_MEASUREMENT_CHARACTERISTIC), "Glucose Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BATTERY_LEVEL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BATTERY_LEVEL_CHARACTERISTIC), "Battery Level");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_MEASUREMENT_CHARACTERISTIC), "Temperature Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_TYPE_CHARACTERISTIC), "Temperature Type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INTERMEDIATE_TEMPERATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(INTERMEDIATE_TEMPERATURE_CHARACTERISTIC), "Intermediate Temperature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEASUREMENT_INTERVAL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEASUREMENT_INTERVAL_CHARACTERISTIC), "Measurement Interval");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOT_KEYBOARD_INPUT_REPORT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BOOT_KEYBOARD_INPUT_REPORT_CHARACTERISTIC), "Boot Keyboard Input Report");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SYSTEM_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SYSTEM_ID_CHARACTERISTIC), "System ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MODEL_NUMBER_STRING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MODEL_NUMBER_STRING_CHARACTERISTIC), "Model Number String");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SERIAL_NUMBER_STRING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SERIAL_NUMBER_STRING_CHARACTERISTIC), "Serial Number String");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIRMWARE_REVISION_STRING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIRMWARE_REVISION_STRING_CHARACTERISTIC), "Firmware Revision String");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HARDWARE_REVISION_STRING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HARDWARE_REVISION_STRING_CHARACTERISTIC), "Hardware Revision String");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOFTWARE_REVISION_STRING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SOFTWARE_REVISION_STRING_CHARACTERISTIC), "Software Revision String");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MANUFACTURER_NAME_STRING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MANUFACTURER_NAME_STRING_CHARACTERISTIC), "Manufacturer Name String");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST_CHARACTERISTIC), "IEEE 11073-20601 Regulatory Certification Data List");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_TIME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CURRENT_TIME_CHARACTERISTIC), "Current Time");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAGNETIC_DECLINATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MAGNETIC_DECLINATION_CHARACTERISTIC), "Magnetic Declination");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SCAN_REFRESH_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SCAN_REFRESH_CHARACTERISTIC), "Scan Refresh");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOT_KEYBOARD_OUTPUT_REPORT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BOOT_KEYBOARD_OUTPUT_REPORT_CHARACTERISTIC), "Boot Keyboard Output Report");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOT_MOUSE_INPUT_REPORT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BOOT_MOUSE_INPUT_REPORT_CHARACTERISTIC), "Boot Mouse Input Report");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLUCOSE_MEASUREMENT_CONTEXT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GLUCOSE_MEASUREMENT_CONTEXT_CHARACTERISTIC), "Glucose Measurement Context");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC), "Blood Pressure Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC), "Intermediate Cuff Pressure");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEART_RATE_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HEART_RATE_MEASUREMENT_CHARACTERISTIC), "Heart Rate Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BODY_SENSOR_LOCATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BODY_SENSOR_LOCATION_CHARACTERISTIC), "Body Sensor Location");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEART_RATE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HEART_RATE_CONTROL_POINT_CHARACTERISTIC), "Heart Rate Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ALERT_STATUS_CHARACTERISTIC), "Alert Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RINGER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RINGER_CONTROL_POINT_CHARACTERISTIC), "Ringer Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RINGER_SETTING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RINGER_SETTING_CHARACTERISTIC), "Ringer Setting");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_CATEGORY_ID_BIT_MASK_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ALERT_CATEGORY_ID_BIT_MASK_CHARACTERISTIC), "Alert Category ID Bit Mask");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_CATEGORY_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ALERT_CATEGORY_ID_CHARACTERISTIC), "Alert Category ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALERT_NOTIFICATION_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ALERT_NOTIFICATION_CONTROL_POINT_CHARACTERISTIC), "Alert Notification Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UNREAD_ALERT_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(UNREAD_ALERT_STATUS_CHARACTERISTIC), "Unread Alert Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NEW_ALERT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(NEW_ALERT_CHARACTERISTIC), "New Alert");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_NEW_ALERT_CATEGORY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_NEW_ALERT_CATEGORY_CHARACTERISTIC), "Supported New Alert Category");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_UNREAD_ALERT_CATEGORY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_UNREAD_ALERT_CATEGORY_CHARACTERISTIC), "Supported Unread Alert Category");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLOOD_PRESSURE_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BLOOD_PRESSURE_FEATURE_CHARACTERISTIC), "Blood Pressure Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HID_INFORMATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HID_INFORMATION_CHARACTERISTIC), "HID Information");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REPORT_MAP_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(REPORT_MAP_CHARACTERISTIC), "Report Map");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HID_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HID_CONTROL_POINT_CHARACTERISTIC), "HID Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REPORT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(REPORT_CHARACTERISTIC), "Report");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PROTOCOL_MODE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PROTOCOL_MODE_CHARACTERISTIC), "Protocol Mode");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SCAN_INTERVAL_WINDOW_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SCAN_INTERVAL_WINDOW_CHARACTERISTIC), "Scan Interval Window");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PNP_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PNP_ID_CHARACTERISTIC), "PnP ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLUCOSE_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GLUCOSE_FEATURE_CHARACTERISTIC), "Glucose Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC), "Record Access Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RSC_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RSC_MEASUREMENT_CHARACTERISTIC), "RSC Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RSC_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RSC_FEATURE_CHARACTERISTIC), "RSC Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SC_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SC_CONTROL_POINT_CHARACTERISTIC), "SC Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DIGITAL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DIGITAL_CHARACTERISTIC), "Digital");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANALOG_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ANALOG_CHARACTERISTIC), "Analog");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AGGREGATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AGGREGATE_CHARACTERISTIC), "Aggregate");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CSC_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CSC_MEASUREMENT_CHARACTERISTIC), "CSC Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CSC_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CSC_FEATURE_CHARACTERISTIC), "CSC Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SENSOR_LOCATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SENSOR_LOCATION_CHARACTERISTIC), "Sensor Location");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLX_SPOT_CHECK_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PLX_SPOT_CHECK_MEASUREMENT_CHARACTERISTIC), "PLX Spot-Check Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLX_CONTINUOUS_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PLX_CONTINUOUS_MEASUREMENT_CHARACTERISTIC), "PLX Continuous Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLX_FEATURES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PLX_FEATURES_CHARACTERISTIC), "PLX Features");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC), "Cycling Power Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_VECTOR_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_VECTOR_CHARACTERISTIC), "Cycling Power Vector");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_FEATURE_CHARACTERISTIC), "Cycling Power Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CYCLING_POWER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CYCLING_POWER_CONTROL_POINT_CHARACTERISTIC), "Cycling Power Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCATION_AND_SPEED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LOCATION_AND_SPEED_CHARACTERISTIC), "Location and Speed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NAVIGATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(NAVIGATION_CHARACTERISTIC), "Navigation");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POSITION_QUALITY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(POSITION_QUALITY_CHARACTERISTIC), "Position Quality");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LN_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LN_FEATURE_CHARACTERISTIC), "LN Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LN_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LN_CONTROL_POINT_CHARACTERISTIC), "LN Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELEVATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ELEVATION_CHARACTERISTIC), "Elevation");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PRESSURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PRESSURE_CHARACTERISTIC), "Pressure");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_CHARACTERISTIC), "Temperature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HUMIDITY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HUMIDITY_CHARACTERISTIC), "Humidity");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRUE_WIND_SPEED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRUE_WIND_SPEED_CHARACTERISTIC), "True Wind Speed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRUE_WIND_DIRECTION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRUE_WIND_DIRECTION_CHARACTERISTIC), "True Wind Direction");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPARENT_WIND_SPEED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(APPARENT_WIND_SPEED_CHARACTERISTIC), "Apparent Wind Speed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(APPARENT_WIND_DIRECTION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(APPARENT_WIND_DIRECTION_CHARACTERISTIC), "Apparent Wind Direction");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GUST_FACTOR_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GUST_FACTOR_CHARACTERISTIC), "Gust Factor");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POLLEN_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(POLLEN_CONCENTRATION_CHARACTERISTIC), "Pollen Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UV_INDEX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(UV_INDEX_CHARACTERISTIC), "UV Index");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IRRADIANCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IRRADIANCE_CHARACTERISTIC), "Irradiance");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RAINFALL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RAINFALL_CHARACTERISTIC), "Rainfall");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WIND_CHILL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(WIND_CHILL_CHARACTERISTIC), "Wind Chill");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEAT_INDEX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HEAT_INDEX_CHARACTERISTIC), "Heat Index");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEW_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEW_POINT_CHARACTERISTIC), "Dew Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DESCRIPTOR_VALUE_CHANGED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DESCRIPTOR_VALUE_CHANGED_CHARACTERISTIC), "Descriptor Value Changed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC), "Aerobic Heart Rate Lower Limit");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AEROBIC_THRESHOLD_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AEROBIC_THRESHOLD_CHARACTERISTIC), "Aerobic Threshold");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AGE_CHARACTERISTIC), "Age");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANAEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ANAEROBIC_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC), "Anaerobic Heart Rate Lower Limit");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANAEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ANAEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC), "Anaerobic Heart Rate Upper Limit");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ANAEROBIC_THRESHOLD_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ANAEROBIC_THRESHOLD_CHARACTERISTIC), "Anaerobic Threshold");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AEROBIC_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC), "Aerobic Heart Rate Upper Limit");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_OF_BIRTH_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DATE_OF_BIRTH_CHARACTERISTIC), "Date of Birth");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_OF_THRESHOLD_ASSESSMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DATE_OF_THRESHOLD_ASSESSMENT_CHARACTERISTIC), "Date of Threshold Assessment");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EMAIL_ADDRESS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(EMAIL_ADDRESS_CHARACTERISTIC), "Email Address");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FAT_BURN_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FAT_BURN_HEART_RATE_LOWER_LIMIT_CHARACTERISTIC), "Fat Burn Heart Rate Lower Limit");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FAT_BURN_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FAT_BURN_HEART_RATE_UPPER_LIMIT_CHARACTERISTIC), "Fat Burn Heart Rate Upper Limit");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIRST_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIRST_NAME_CHARACTERISTIC), "First Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIVE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIVE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC), "Five Zone Heart Rate Limits");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENDER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GENDER_CHARACTERISTIC), "Gender");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEART_RATE_MAX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HEART_RATE_MAX_CHARACTERISTIC), "Heart Rate Max");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HEIGHT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HEIGHT_CHARACTERISTIC), "Height");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIP_CIRCUMFERENCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HIP_CIRCUMFERENCE_CHARACTERISTIC), "Hip Circumference");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LAST_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LAST_NAME_CHARACTERISTIC), "Last Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAXIMUM_RECOMMENDED_HEART_RATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MAXIMUM_RECOMMENDED_HEART_RATE_CHARACTERISTIC), "Maximum Recommended Heart Rate");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RESTING_HEART_RATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RESTING_HEART_RATE_CHARACTERISTIC), "Resting Heart Rate");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SPORT_TYPE_FOR_AEROBIC_AND_ANAEROBIC_THRESHOLDS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SPORT_TYPE_FOR_AEROBIC_AND_ANAEROBIC_THRESHOLDS_CHARACTERISTIC), "Sport Type for Aerobic and Anaerobic Thresholds");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(THREE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(THREE_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC), "Three Zone Heart Rate Limits");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TWO_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TWO_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC), "Two Zone Heart Rate Limits");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VO2_MAX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VO2_MAX_CHARACTERISTIC), "VO2 Max");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WAIST_CIRCUMFERENCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(WAIST_CIRCUMFERENCE_CHARACTERISTIC), "Waist Circumference");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WEIGHT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(WEIGHT_CHARACTERISTIC), "Weight");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATABASE_CHANGE_INCREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DATABASE_CHANGE_INCREMENT_CHARACTERISTIC), "Database Change Increment");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(USER_INDEX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(USER_INDEX_CHARACTERISTIC), "User Index");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BODY_COMPOSITION_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BODY_COMPOSITION_FEATURE_CHARACTERISTIC), "Body Composition Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BODY_COMPOSITION_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BODY_COMPOSITION_MEASUREMENT_CHARACTERISTIC), "Body Composition Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WEIGHT_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(WEIGHT_MEASUREMENT_CHARACTERISTIC), "Weight Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(WEIGHT_SCALE_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(WEIGHT_SCALE_FEATURE_CHARACTERISTIC), "Weight Scale Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(USER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(USER_CONTROL_POINT_CHARACTERISTIC), "User Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAGNETIC_FLUX_DENSITY_2D_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MAGNETIC_FLUX_DENSITY_2D_CHARACTERISTIC), "Magnetic Flux Density - 2D");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MAGNETIC_FLUX_DENSITY_3D_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MAGNETIC_FLUX_DENSITY_3D_CHARACTERISTIC), "Magnetic Flux Density - 3D");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LANGUAGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LANGUAGE_CHARACTERISTIC), "Language");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BAROMETRIC_PRESSURE_TREND_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BAROMETRIC_PRESSURE_TREND_CHARACTERISTIC), "Barometric Pressure Trend");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOND_MANAGEMENT_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BOND_MANAGEMENT_CONTROL_POINT_CHARACTERISTIC), "Bond Management Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOND_MANAGEMENT_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BOND_MANAGEMENT_FEATURE_CHARACTERISTIC), "Bond Management Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CENTRAL_ADDRESS_RESOLUTION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CENTRAL_ADDRESS_RESOLUTION_CHARACTERISTIC), "Central Address Resolution");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CGM_MEASUREMENT_CHARACTERISTIC), "CGM Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CGM_FEATURE_CHARACTERISTIC), "CGM Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CGM_STATUS_CHARACTERISTIC), "CGM Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_SESSION_START_TIME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CGM_SESSION_START_TIME_CHARACTERISTIC), "CGM Session Start Time");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_SESSION_RUN_TIME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CGM_SESSION_RUN_TIME_CHARACTERISTIC), "CGM Session Run Time");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CGM_SPECIFIC_OPS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CGM_SPECIFIC_OPS_CONTROL_POINT_CHARACTERISTIC), "CGM Specific Ops Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INDOOR_POSITIONING_CONFIGURATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(INDOOR_POSITIONING_CONFIGURATION_CHARACTERISTIC), "Indoor Positioning Configuration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LATITUDE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LATITUDE_CHARACTERISTIC), "Latitude");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LONGITUDE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LONGITUDE_CHARACTERISTIC), "Longitude");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCAL_NORTH_COORDINATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LOCAL_NORTH_COORDINATE_CHARACTERISTIC), "Local North Coordinate");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCAL_EAST_COORDINATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LOCAL_EAST_COORDINATE_CHARACTERISTIC), "Local East Coordinate");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FLOOR_NUMBER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FLOOR_NUMBER_CHARACTERISTIC), "Floor Number");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ALTITUDE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ALTITUDE_CHARACTERISTIC), "Altitude");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UNCERTAINTY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(UNCERTAINTY_CHARACTERISTIC), "Uncertainty");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCATION_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LOCATION_NAME_CHARACTERISTIC), "Location Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(URI_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(URI_CHARACTERISTIC), "URI");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_HEADERS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HTTP_HEADERS_CHARACTERISTIC), "HTTP Headers");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_STATUS_CODE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HTTP_STATUS_CODE_CHARACTERISTIC), "HTTP Status Code");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_ENTITY_BODY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HTTP_ENTITY_BODY_CHARACTERISTIC), "HTTP Entity Body");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTP_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HTTP_CONTROL_POINT_CHARACTERISTIC), "HTTP Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HTTPS_SECURITY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HTTPS_SECURITY_CHARACTERISTIC), "HTTPS Security");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TDS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TDS_CONTROL_POINT_CHARACTERISTIC), "TDS Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OTS_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OTS_FEATURE_CHARACTERISTIC), "OTS Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_NAME_CHARACTERISTIC), "object name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_TYPE_CHARACTERISTIC), "object type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_SIZE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_SIZE_CHARACTERISTIC), "object size");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_FIRST_CREATED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_FIRST_CREATED_CHARACTERISTIC), "object first created");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_LAST_MODIFIED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_LAST_MODIFIED_CHARACTERISTIC), "object last modified");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_ID_CHARACTERISTIC), "object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_PROPERTIES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_PROPERTIES_CHARACTERISTIC), "object properties");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_ACTION_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_ACTION_CONTROL_POINT_CHARACTERISTIC), "object actioncontrol point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_LIST_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_LIST_CONTROL_POINT_CHARACTERISTIC), "object list control point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_LIST_FILTER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_LIST_FILTER_CHARACTERISTIC), "object list filter");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OBJECT_CHANGED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OBJECT_CHANGED_CHARACTERISTIC), "object changed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RESOLVABLE_PRIVATE_ADDRESS_ONLY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RESOLVABLE_PRIVATE_ADDRESS_ONLY_CHARACTERISTIC), "Resolvable Private Address Only");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(UNSPECIFIED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(UNSPECIFIED_CHARACTERISTIC), "Unspecified");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DIRECTORY_LISTING_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DIRECTORY_LISTING_CHARACTERISTIC), "Directory Listing");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FITNESS_MACHINE_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FITNESS_MACHINE_FEATURE_CHARACTERISTIC), "Fitness Machine Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TREADMILL_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TREADMILL_DATA_CHARACTERISTIC), "Treadmill Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CROSS_TRAINER_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CROSS_TRAINER_DATA_CHARACTERISTIC), "Cross Trainer Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STEP_CLIMBER_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(STEP_CLIMBER_DATA_CHARACTERISTIC), "Step Climber Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STAIR_CLIMBER_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(STAIR_CLIMBER_DATA_CHARACTERISTIC), "Stair Climber Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ROWER_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ROWER_DATA_CHARACTERISTIC), "Rower Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INDOOR_BIKE_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(INDOOR_BIKE_DATA_CHARACTERISTIC), "Indoor Bike Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRAINING_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRAINING_STATUS_CHARACTERISTIC), "Training Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_SPEED_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_SPEED_RANGE_CHARACTERISTIC), "Supported Speed Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_INCLINATION_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_INCLINATION_RANGE_CHARACTERISTIC), "Supported Inclination Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_RESISTANCE_LEVEL_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_RESISTANCE_LEVEL_RANGE_CHARACTERISTIC), "Supported Resistance Level Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_HEART_RATE_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_HEART_RATE_RANGE_CHARACTERISTIC), "Supported Heart Rate Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_POWER_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_POWER_RANGE_CHARACTERISTIC), "Supported Power Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FITNESS_MACHINE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FITNESS_MACHINE_CONTROL_POINT_CHARACTERISTIC), "Fitness Machine Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FITNESS_MACHINE_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FITNESS_MACHINE_STATUS_CHARACTERISTIC), "Fitness Machine Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROVISIONING_DATA_IN_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MESH_PROVISIONING_DATA_IN_CHARACTERISTIC), "Mesh Provisioning Data In");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROVISIONING_DATA_OUT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MESH_PROVISIONING_DATA_OUT_CHARACTERISTIC), "Mesh Provisioning Data Out");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROXY_DATA_IN_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MESH_PROXY_DATA_IN_CHARACTERISTIC), "Mesh Proxy Data In");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MESH_PROXY_DATA_OUT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MESH_PROXY_DATA_OUT_CHARACTERISTIC), "Mesh Proxy Data Out");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AVERAGE_CURRENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AVERAGE_CURRENT_CHARACTERISTIC), "Average Current");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AVERAGE_VOLTAGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AVERAGE_VOLTAGE_CHARACTERISTIC), "Average Voltage");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BOOLEAN_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BOOLEAN_CHARACTERISTIC), "Boolean");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATIC_DISTANCE_FROM_PLANCKIAN_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CHROMATIC_DISTANCE_FROM_PLANCKIAN_CHARACTERISTIC), "Chromatic Distance From Planckian");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_COORDINATES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_COORDINATES_CHARACTERISTIC), "Chromaticity Coordinates");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITYIN_CCT_AND_DUV_VALUES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CHROMATICITYIN_CCT_AND_DUV_VALUES_CHARACTERISTIC), "Chromaticity in CCT And Duv Values");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_TOLERANCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_TOLERANCE_CHARACTERISTIC), "Chromaticity Tolerance");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CIE13_3_1995_COLOR_RENDERING_INDEX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CIE13_3_1995_COLOR_RENDERING_INDEX_CHARACTERISTIC), "CIE 13.3-1995 Color Rendering Index");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COEFFICIENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(COEFFICIENT_CHARACTERISTIC), "Coefficient");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CORRELATED_COLOR_TEMPERATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CORRELATED_COLOR_TEMPERATURE_CHARACTERISTIC), "Correlated Color Temperature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COUNT_16_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(COUNT_16_CHARACTERISTIC), "Count 16");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COUNT_24_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(COUNT_24_CHARACTERISTIC), "Count 24");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(COUNTRY_CODE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(COUNTRY_CODE_CHARACTERISTIC), "Country Code");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATE_UTC_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DATE_UTC_CHARACTERISTIC), "Date UTC");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_CHARACTERISTIC), "Electric Current");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_RANGE_CHARACTERISTIC), "Electric Current Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_SPECIFICATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_SPECIFICATION_CHARACTERISTIC), "Electric Current Specification");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ELECTRIC_CURRENT_STATISTICS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ELECTRIC_CURRENT_STATISTICS_CHARACTERISTIC), "Electric Current Statistics");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENERGY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ENERGY_CHARACTERISTIC), "Energy");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENERGY_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ENERGY_IN_A_PERIOD_OF_DAY_CHARACTERISTIC), "Energy In A Period Of Day");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EVENT_STATISTICS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(EVENT_STATISTICS_CHARACTERISTIC), "Event Statistics");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_16_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_16_CHARACTERISTIC), "Fixed String 16");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_24_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_24_CHARACTERISTIC), "Fixed String 24");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_36_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_36_CHARACTERISTIC), "Fixed String 36");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FIXED_STRING_8_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FIXED_STRING_8_CHARACTERISTIC), "Fixed String 8");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENERIC_LEVEL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GENERIC_LEVEL_CHARACTERISTIC), "Generic Level");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GLOBAL_TRADE_ITEM_NUMBER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GLOBAL_TRADE_ITEM_NUMBER_CHARACTERISTIC), "Global Trade Item Number");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ILLUMINANCE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ILLUMINANCE_CHARACTERISTIC), "Illuminance");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_EFFICACY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LUMINOUS_EFFICACY_CHARACTERISTIC), "Luminous Efficacy");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_ENERGY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LUMINOUS_ENERGY_CHARACTERISTIC), "Luminous Energy");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_EXPOSURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LUMINOUS_EXPOSURE_CHARACTERISTIC), "Luminous Exposure");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_FLUX_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LUMINOUS_FLUX_CHARACTERISTIC), "Luminous Flux");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_FLUX_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LUMINOUS_FLUX_RANGE_CHARACTERISTIC), "Luminous Flux Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LUMINOUS_INTENSITY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LUMINOUS_INTENSITY_CHARACTERISTIC), "Luminous Intensity");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MASS_FLOW_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MASS_FLOW_CHARACTERISTIC), "Mass Flow");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERCEIVED_LIGHTNESS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PERCEIVED_LIGHTNESS_CHARACTERISTIC), "Perceived Lightness");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PERCENTAGE_8_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PERCENTAGE_8_CHARACTERISTIC), "Percentage 8");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POWER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(POWER_CHARACTERISTIC), "Power");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(POWER_SPECIFICATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(POWER_SPECIFICATION_CHARACTERISTIC), "Power Specification");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_RUNTIME_IN_A_CURRENT_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RELATIVE_RUNTIME_IN_A_CURRENT_RANGE_CHARACTERISTIC), "Relative Runtime In A Current Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_RUNTIME_IN_A_GENERIC_LEVEL_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RELATIVE_RUNTIME_IN_A_GENERIC_LEVEL_RANGE_CHARACTERISTIC), "Relative Runtime In A Generic Level Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_A_VOLTAGE_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_A_VOLTAGE_RANGE_CHARACTERISTIC), "Relative Value In A Voltage Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_AN_ILLUMINANCE_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_AN_ILLUMINANCE_RANGE_CHARACTERISTIC), "Relative Value In An Illuminance Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_A_PERIOD_OF_DAY_CHARACTERISTIC), "Relative Value In A Period Of Day");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RELATIVE_VALUE_IN_A_TEMPERATURE_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RELATIVE_VALUE_IN_A_TEMPERATURE_RANGE_CHARACTERISTIC), "Relative Value In A Temperature Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_8_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_8_CHARACTERISTIC), "Temperature 8");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_8_IN_A_PERIOD_OF_DAY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_8_IN_A_PERIOD_OF_DAY_CHARACTERISTIC), "Temperature 8 In A Period Of Day");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_8_STATISTICS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_8_STATISTICS_CHARACTERISTIC), "Temperature 8 Statistics");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_RANGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_RANGE_CHARACTERISTIC), "Temperature Range");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TEMPERATURE_STATISTICS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TEMPERATURE_STATISTICS_CHARACTERISTIC), "Temperature Statistics");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_DECIHOUR_8_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_DECIHOUR_8_CHARACTERISTIC), "Time Decihour 8");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_EXPONENTIAL_8_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_EXPONENTIAL_8_CHARACTERISTIC), "Time Exponential 8");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_HOUR_24_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_HOUR_24_CHARACTERISTIC), "Time Hour 24");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_MILLISECOND_24_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_MILLISECOND_24_CHARACTERISTIC), "Time Millisecond 24");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SECOND_16_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_SECOND_16_CHARACTERISTIC), "Time Second 16");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_SECOND_8_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_SECOND_8_CHARACTERISTIC), "Time Second 8");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLTAGE_CHARACTERISTIC), "Voltage");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_SPECIFICATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLTAGE_SPECIFICATION_CHARACTERISTIC), "Voltage Specification");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLTAGE_STATISTICS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLTAGE_STATISTICS_CHARACTERISTIC), "Voltage Statistics");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_FLOW_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLUME_FLOW_CHARACTERISTIC), "Volume Flow");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CHROMATICITY_COORDINATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CHROMATICITY_COORDINATE_CHARACTERISTIC), "Chromaticity Coordinate");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RC_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RC_FEATURE_CHARACTERISTIC), "RC Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RC_SETTINGS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RC_SETTINGS_CHARACTERISTIC), "RC Settings");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RECONNECTION_CONFIGURATION_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RECONNECTION_CONFIGURATION_CONTROL_POINT_CHARACTERISTIC), "Reconnection Configuration Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_STATUS_CHANGED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_STATUS_CHANGED_CHARACTERISTIC), "IDD Status Changed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_STATUS_CHARACTERISTIC), "IDD Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_ANNUNCIATION_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_ANNUNCIATION_STATUS_CHARACTERISTIC), "IDD Annunciation Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_FEATURES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_FEATURES_CHARACTERISTIC), "IDD Features");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_STATUS_READER_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_STATUS_READER_CONTROL_POINT_CHARACTERISTIC), "IDD Status Reader Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_COMMAND_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_COMMAND_CONTROL_POINT_CHARACTERISTIC), "IDD Command Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_COMMAND_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_COMMAND_DATA_CHARACTERISTIC), "IDD Command Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_RECORD_ACCESS_CONTROL_POINT_CHARACTERISTIC), "IDD Record Access Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(IDD_HISTORY_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(IDD_HISTORY_DATA_CHARACTERISTIC), "IDD History Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CLIENT_SUPPORTED_FEATURES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CLIENT_SUPPORTED_FEATURES_CHARACTERISTIC), "Client Supported Features");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DATABASE_HASH_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DATABASE_HASH_CHARACTERISTIC), "Database Hash");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BSS_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BSS_CONTROL_POINT_CHARACTERISTIC), "BSS Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BSS_RESPONSE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BSS_RESPONSE_CHARACTERISTIC), "BSS Response");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EMERGENCY_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(EMERGENCY_ID_CHARACTERISTIC), "Emergency ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(EMERGENCY_TEXT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(EMERGENCY_TEXT_CHARACTERISTIC), "Emergency Text");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENHANCED_BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ENHANCED_BLOOD_PRESSURE_MEASUREMENT_CHARACTERISTIC), "Enhanced Blood Pressure Measurement");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ENHANCED_INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ENHANCED_INTERMEDIATE_CUFF_PRESSURE_CHARACTERISTIC), "Enhanced Intermediate Cuff Pressure");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLOOD_PRESSURE_RECORD_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BLOOD_PRESSURE_RECORD_CHARACTERISTIC), "Blood Pressure Record");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(REGISTERED_USER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(REGISTERED_USER_CHARACTERISTIC), "Registered User");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BR_EDR_HANDOVER_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BR_EDR_HANDOVER_DATA_CHARACTERISTIC), "BR-EDR Handover Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BLUETOOTH_SIG_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BLUETOOTH_SIG_DATA_CHARACTERISTIC), "Bluetooth SIG Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SERVER_SUPPORTED_FEATURES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SERVER_SUPPORTED_FEATURES_CHARACTERISTIC), "Server Supported Features");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PHYSICAL_ACTIVITY_MONITOR_FEATURES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PHYSICAL_ACTIVITY_MONITOR_FEATURES_CHARACTERISTIC), "Physical Activity Monitor Features");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENERAL_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GENERAL_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC), "General Activity Instantaneous Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GENERAL_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GENERAL_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC), "General Activity Summary Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CARDIO_RESPIRATORY_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CARDIO_RESPIRATORY_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC), "CardioRespiratory Activity Instantaneous Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CARDIO_RESPIRATORY_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CARDIO_RESPIRATORY_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC), "CardioRespiratory Activity Summary Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STEP_COUNTER_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(STEP_COUNTER_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC), "Step Counter Activity Summary Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SLEEP_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SLEEP_ACTIVITY_INSTANTANEOUS_DATA_CHARACTERISTIC), "Sleep Activity Instantaneous Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SLEEP_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SLEEP_ACTIVITY_SUMMARY_DATA_CHARACTERISTIC), "Sleep Activity Summary Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PHYSICAL_ACTIVITY_MONITOR_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PHYSICAL_ACTIVITY_MONITOR_CONTROL_POINT_CHARACTERISTIC), "Physical Activity Monitor Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_SESSION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CURRENT_SESSION_CHARACTERISTIC), "Current Session");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SESSION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SESSION_CHARACTERISTIC), "Session");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PREFERRED_UNITS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PREFERRED_UNITS_CHARACTERISTIC), "Preferred Units");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIGH_RESOLUTION_HEIGHT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HIGH_RESOLUTION_HEIGHT_CHARACTERISTIC), "High Resolution Height");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MIDDLE_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MIDDLE_NAME_CHARACTERISTIC), "Middle Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STRIDE_LENGTH_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(STRIDE_LENGTH_CHARACTERISTIC), "Stride Length");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HANDEDNESS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HANDEDNESS_CHARACTERISTIC), "Handedness");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_WEARING_POSITION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEVICE_WEARING_POSITION_CHARACTERISTIC), "Device Wearing Position");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(FOUR_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(FOUR_ZONE_HEART_RATE_LIMITS_CHARACTERISTIC), "Four Zone Heart Rate Limits");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(HIGH_INTENSITY_EXERCISE_THRESHOLD_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(HIGH_INTENSITY_EXERCISE_THRESHOLD_CHARACTERISTIC), "High Intensity Exercise Threshold");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ACTIVITY_GOAL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ACTIVITY_GOAL_CHARACTERISTIC), "Activity Goal");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEDENTARY_INTERVAL_NOTIFICATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SEDENTARY_INTERVAL_NOTIFICATION_CHARACTERISTIC), "Sedentary Interval Notification");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALORIC_INTAKE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CALORIC_INTAKE_CHARACTERISTIC), "Caloric Intake");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_STATE_CHARACTERISTIC), "Audio Input State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GAIN_SETTINGS_ATTRIBUTE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GAIN_SETTINGS_ATTRIBUTE_CHARACTERISTIC), "Gain Settings Attribute");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_TYPE_CHARACTERISTIC), "Audio Input Type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_STATUS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_STATUS_CHARACTERISTIC), "Audio Input Status");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_CONTROL_POINT_CHARACTERISTIC), "Audio Input Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_INPUT_DESCRIPTION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_INPUT_DESCRIPTION_CHARACTERISTIC), "Audio Input Description");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLUME_STATE_CHARACTERISTIC), "Volume State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLUME_CONTROL_POINT_CHARACTERISTIC), "Volume Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_FLAGS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLUME_FLAGS_CHARACTERISTIC), "Volume Flags");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OFFSET_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OFFSET_STATE_CHARACTERISTIC), "Offset State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_LOCATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_LOCATION_CHARACTERISTIC), "Audio Location");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(VOLUME_OFFSET_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(VOLUME_OFFSET_CONTROL_POINT_CHARACTERISTIC), "Volume Offset Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AUDIO_OUTPUT_DESCRIPTION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AUDIO_OUTPUT_DESCRIPTION_CHARACTERISTIC), "Audio Output Description");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SET_IDENTITY_RESOLVING_KEY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SET_IDENTITY_RESOLVING_KEY_CHARACTERISTIC), "Set Identity Resolving Key Characteristic");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SIZE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SIZE_CHARACTERISTIC), "Size Characteristic");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(LOCK_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(LOCK_CHARACTERISTIC), "Lock Characteristic");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(RANK_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(RANK_CHARACTERISTIC), "Rank Characteristic");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_FEATURE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_FEATURE_CHARACTERISTIC), "Device Time Feature");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_PARAMETERS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_PARAMETERS_CHARACTERISTIC), "Device Time Parameters");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_CHARACTERISTIC), "Device Time");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(DEVICE_TIME_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(DEVICE_TIME_CONTROL_POINT_CHARACTERISTIC), "Device Time Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TIME_CHANGE_LOG_DATA_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TIME_CHANGE_LOG_DATA_CHARACTERISTIC), "Time Change Log Data");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_NAME_CHARACTERISTIC), "Media Player Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_ICON_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_ICON_OBJECT_ID_CHARACTERISTIC), "Media Player Icon Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_ICON_URL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_ICON_URL_CHARACTERISTIC), "Media Player Icon URL");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_CHANGED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRACK_CHANGED_CHARACTERISTIC), "Track Changed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_TITLE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRACK_TITLE_CHARACTERISTIC), "Track Title");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_DURATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRACK_DURATION_CHARACTERISTIC), "Track Duration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_POSITION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRACK_POSITION_CHARACTERISTIC), "Track Position");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLAYBACK_SPEED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PLAYBACK_SPEED_CHARACTERISTIC), "Playback Speed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEEKING_SPEED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SEEKING_SPEED_CHARACTERISTIC), "Seeking Speed");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_TRACK_SEGMENTS_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CURRENT_TRACK_SEGMENTS_OBJECT_ID_CHARACTERISTIC), "Current Track Segments Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_TRACK_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CURRENT_TRACK_OBJECT_ID_CHARACTERISTIC), "Current Track Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NEXT_TRACK_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(NEXT_TRACK_OBJECT_ID_CHARACTERISTIC), "Next Track Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARENT_GROUP_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PARENT_GROUP_OBJECT_ID_CHARACTERISTIC), "Parent Group Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CURRENT_GROUP_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CURRENT_GROUP_OBJECT_ID_CHARACTERISTIC), "Current Group Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLAYING_ORDER_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PLAYING_ORDER_CHARACTERISTIC), "Playing Order");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PLAYING_ORDERS_SUPPORTED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PLAYING_ORDERS_SUPPORTED_CHARACTERISTIC), "Playing Orders Supported");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_STATE_CHARACTERISTIC), "Media State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_CONTROL_POINT_CHARACTERISTIC), "Media Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_CONTROL_POINT_OPCODES_SUPPORTED_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_CONTROL_POINT_OPCODES_SUPPORTED_CHARACTERISTIC), "Media Control Point Opcodes Supported");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEARCH_RESULTS_OBJECT_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SEARCH_RESULTS_OBJECT_ID_CHARACTERISTIC), "Search Results Object ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SEARCH_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SEARCH_CONTROL_POINT_CHARACTERISTIC), "Search Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MEDIA_PLAYER_ICON_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MEDIA_PLAYER_ICON_OBJECT_TYPE_CHARACTERISTIC), "Media Player Icon Object Type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_SEGMENTS_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRACK_SEGMENTS_OBJECT_TYPE_CHARACTERISTIC), "Track Segments Object Type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TRACK_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TRACK_OBJECT_TYPE_CHARACTERISTIC), "Track Object Type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(GROUP_OBJECT_TYPE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(GROUP_OBJECT_TYPE_CHARACTERISTIC), "Group Object Type");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CONSTANT_TONE_EXTENSION_ENABLE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CONSTANT_TONE_EXTENSION_ENABLE_CHARACTERISTIC), "Constant Tone Extension Enable");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_LENGTH_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_LENGTH_CHARACTERISTIC), "Advertising Constant Tone Extension Minimum Length");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_TRANSMIT_COUNT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_TRANSMIT_COUNT_CHARACTERISTIC), "Advertising Constant Tone Extension Minimum Transmit Count");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_TRANSMIT_DURATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_TRANSMIT_DURATION_CHARACTERISTIC), "Advertising Constant Tone Extension Transmit Duration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_INTERVAL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_INTERVAL_CHARACTERISTIC), "Advertising Constant Tone Extension Interval");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ADVERTISING_CONSTANT_TONE_EXTENSION_PHY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ADVERTISING_CONSTANT_TONE_EXTENSION_PHY_CHARACTERISTIC), "Advertising Constant Tone Extension PHY");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_PROVIDER_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_PROVIDER_NAME_CHARACTERISTIC), "Bearer Provider Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_UCI_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_UCI_CHARACTERISTIC), "Bearer UCI");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_TECHNOLOGY_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_TECHNOLOGY_CHARACTERISTIC), "Bearer Technology");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_URI_SCHEMES_SUPPORTED_LIST_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_URI_SCHEMES_SUPPORTED_LIST_CHARACTERISTIC), "Bearer URI Schemes Supported List");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_SIGNAL_STRENGTH_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_SIGNAL_STRENGTH_CHARACTERISTIC), "Bearer Signal Strength");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_SIGNAL_STRENGTH_REPORTING_INTERVAL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_SIGNAL_STRENGTH_REPORTING_INTERVAL_CHARACTERISTIC), "Bearer Signal Strength Reporting Interval");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BEARER_LIST_CURRENT_CALLS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BEARER_LIST_CURRENT_CALLS_CHARACTERISTIC), "Bearer List Current Calls");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CONTENT_CONTROL_ID_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CONTENT_CONTROL_ID_CHARACTERISTIC), "Content Control ID");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(STATUS_FLAGS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(STATUS_FLAGS_CHARACTERISTIC), "Status Flags");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INCOMING_CALL_TARGET_BEARER_URI_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(INCOMING_CALL_TARGET_BEARER_URI_CHARACTERISTIC), "Incoming Call Target Bearer URI");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CALL_STATE_CHARACTERISTIC), "Call State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CALL_CONTROL_POINT_CHARACTERISTIC), "Call Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_CONTROL_POINT_OPTIONAL_OPCODES_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CALL_CONTROL_POINT_OPTIONAL_OPCODES_CHARACTERISTIC), "Call Control Point Optional Opcodes");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(TERMINATION_REASON_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(TERMINATION_REASON_CHARACTERISTIC), "Termination Reason");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(INCOMING_CALL_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(INCOMING_CALL_CHARACTERISTIC), "Incoming Call");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CALL_FRIENDLY_NAME_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CALL_FRIENDLY_NAME_CHARACTERISTIC), "Call Friendly Name");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(MUTE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(MUTE_CHARACTERISTIC), "Mute");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SINK_ASE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SINK_ASE_CHARACTERISTIC), "Sink ASE");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOURCE_ASE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SOURCE_ASE_CHARACTERISTIC), "Source ASE");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(ASE_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(ASE_CONTROL_POINT_CHARACTERISTIC), "ASE Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BROADCAST_AUDIO_SCAN_CONTROL_POINT_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BROADCAST_AUDIO_SCAN_CONTROL_POINT_CHARACTERISTIC), "Broadcast Audio Scan Control Point");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(BROADCAST_RECEIVE_STATE_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(BROADCAST_RECEIVE_STATE_CHARACTERISTIC), "Broadcast Receive State");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SINK_PAC_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SINK_PAC_CHARACTERISTIC), "Sink PAC");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SINK_AUDIO_LOCATIONS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SINK_AUDIO_LOCATIONS_CHARACTERISTIC), "Sink Audio Locations");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOURCE_PAC_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SOURCE_PAC_CHARACTERISTIC), "Source PAC");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SOURCE_AUDIO_LOCATIONS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SOURCE_AUDIO_LOCATIONS_CHARACTERISTIC), "Source Audio Locations");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AVAILABLE_AUDIO_CONTEXTS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AVAILABLE_AUDIO_CONTEXTS_CHARACTERISTIC), "Available Audio Contexts");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SUPPORTED_AUDIO_CONTEXTS_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SUPPORTED_AUDIO_CONTEXTS_CHARACTERISTIC), "Supported Audio Contexts");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(AMMONIA_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(AMMONIA_CONCENTRATION_CHARACTERISTIC), "Ammonia Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(CARBON_MONOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(CARBON_MONOXIDE_CONCENTRATION_CHARACTERISTIC), "Carbon Monoxide Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(METHANE_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(METHANE_CONCENTRATION_CHARACTERISTIC), "Methane Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NITROGEN_DIOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(NITROGEN_DIOXIDE_CONCENTRATION_CHARACTERISTIC), "Nitrogen Dioxide Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(NON_METHANE_VOLATILE_ORGANIC_COMPOUNDS_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(NON_METHANE_VOLATILE_ORGANIC_COMPOUNDS_CONCENTRATION_CHARACTERISTIC), "Non-Methane Volatile Organic Compounds Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(OZONE_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(OZONE_CONCENTRATION_CHARACTERISTIC), "Ozone Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARTICULATE_MATTER_PM1_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PARTICULATE_MATTER_PM1_CONCENTRATION_CHARACTERISTIC), "Particulate Matter - PM1 Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARTICULATE_MATTER_PM25_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PARTICULATE_MATTER_PM25_CONCENTRATION_CHARACTERISTIC), "Particulate Matter - PM2.5 Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(PARTICULATE_MATTER_PM10_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(PARTICULATE_MATTER_PM10_CONCENTRATION_CHARACTERISTIC), "Particulate Matter - PM10 Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SULFUR_DIOXIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SULFUR_DIOXIDE_CONCENTRATION_CHARACTERISTIC), "Sulfur Dioxide Concentration");
		assertTrue(CHARACTERISTIC_MAPPING_128.containsKey(SULFUR_HEXAFLUORIDE_CONCENTRATION_CHARACTERISTIC));
		assertEquals(CHARACTERISTIC_MAPPING_128.get(SULFUR_HEXAFLUORIDE_CONCENTRATION_CHARACTERISTIC), "Sulfur Hexafluoride Concentration");
	}
	
}