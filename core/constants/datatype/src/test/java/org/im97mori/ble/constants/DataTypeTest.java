package org.im97mori.ble.constants;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import static org.im97mori.ble.constants.DataType.*;

public class DataTypeTest {

	@Test
	public void test_map_00001() {
		assertTrue(DATA_TYPE_MAPPING.containsKey(FLAGS_DATA_TYPE));
		assertEquals("Flags", DATA_TYPE_MAPPING.get(FLAGS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(INCOMPLETE_LIST_OF_16_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertEquals("Incomplete List of 16-bit Service Class UUIDs",
				DATA_TYPE_MAPPING.get(INCOMPLETE_LIST_OF_16_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(COMPLETE_LIST_OF_16_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertEquals("Complete List of 16-bit Service Class UUIDs",
				DATA_TYPE_MAPPING.get(COMPLETE_LIST_OF_16_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(INCOMPLETE_LIST_OF_32_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertEquals("Incomplete List of 32-bit Service Class UUIDs",
				DATA_TYPE_MAPPING.get(INCOMPLETE_LIST_OF_32_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(COMPLETE_LIST_OF_32_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertEquals("Complete List of 32-bit Service Class UUIDs",
				DATA_TYPE_MAPPING.get(COMPLETE_LIST_OF_32_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(INCOMPLETE_LIST_OF_128_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertEquals("Incomplete List of 128-bit Service Class UUIDs",
				DATA_TYPE_MAPPING.get(INCOMPLETE_LIST_OF_128_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(COMPLETE_LIST_OF_128_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertEquals("Complete List of 128-bit Service Class UUIDs",
				DATA_TYPE_MAPPING.get(COMPLETE_LIST_OF_128_BIT_SERVICE_CLASS_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SHORTENED_LOCAL_NAME_DATA_TYPE));
		assertEquals("Shortened Local Name", DATA_TYPE_MAPPING.get(SHORTENED_LOCAL_NAME_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(COMPLETE_LOCAL_NAME_DATA_TYPE));
		assertEquals("Complete Local Name", DATA_TYPE_MAPPING.get(COMPLETE_LOCAL_NAME_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(TX_POWER_LEVEL_DATA_TYPE));
		assertEquals("Tx Power Level", DATA_TYPE_MAPPING.get(TX_POWER_LEVEL_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(CLASSOF_DEVICE_DATA_TYPE));
		assertEquals("Class of Device", DATA_TYPE_MAPPING.get(CLASSOF_DEVICE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SIMPLE_PAIRING_HASH_C192_DATA_TYPE));
		assertEquals("Simple Pairing Hash C-192", DATA_TYPE_MAPPING.get(SIMPLE_PAIRING_HASH_C192_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SIMPLE_PAIRING_RANDOMIZER_R192_DATA_TYPE));
		assertEquals("Simple Pairing Randomizer R-192",
				DATA_TYPE_MAPPING.get(SIMPLE_PAIRING_RANDOMIZER_R192_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(DEVICE_ID_DATA_TYPE));
		assertEquals("Device ID / Security Manager TK Value", DATA_TYPE_MAPPING.get(DEVICE_ID_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SECURITY_MANAGER_TK_VALUE_DATA_TYPE));
		assertEquals("Device ID / Security Manager TK Value",
				DATA_TYPE_MAPPING.get(SECURITY_MANAGER_TK_VALUE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SECURITY_MANAGER_OUTOF_BAND_FLAGS_DATA_TYPE));
		assertEquals("Security Manager Out of Band Flags",
				DATA_TYPE_MAPPING.get(SECURITY_MANAGER_OUTOF_BAND_FLAGS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(PERIPHERAL_CONNECTION_INTERVAL_RANGE_DATA_TYPE));
		assertEquals("Peripheral Connection Interval Range",
				DATA_TYPE_MAPPING.get(PERIPHERAL_CONNECTION_INTERVAL_RANGE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LIST_OF_16_BIT_SERVICE_SOLICITATION_UUIDS_DATA_TYPE));
		assertEquals("List of 16-bit Service Solicitation UUIDs",
				DATA_TYPE_MAPPING.get(LIST_OF_16_BIT_SERVICE_SOLICITATION_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LIST_OF_128_BIT_SERVICE_SOLICITATION_UUIDS_DATA_TYPE));
		assertEquals("List of 128-bit Service Solicitation UUIDs",
				DATA_TYPE_MAPPING.get(LIST_OF_128_BIT_SERVICE_SOLICITATION_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SERVICE_DATA_16_BIT_UUID_DATA_TYPE));
		assertEquals("Service Data - 16-bit UUID", DATA_TYPE_MAPPING.get(SERVICE_DATA_16_BIT_UUID_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(PUBLIC_TARGET_ADDRESS_DATA_TYPE));
		assertEquals("Public Target Address", DATA_TYPE_MAPPING.get(PUBLIC_TARGET_ADDRESS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(RANDOM_TARGET_ADDRESS_DATA_TYPE));
		assertEquals("Random Target Address", DATA_TYPE_MAPPING.get(RANDOM_TARGET_ADDRESS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(APPEARANCE_DATA_TYPE));
		assertEquals("Appearance", DATA_TYPE_MAPPING.get(APPEARANCE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(ADVERTISING_INTERVAL_DATA_TYPE));
		assertEquals("Advertising Interval", DATA_TYPE_MAPPING.get(ADVERTISING_INTERVAL_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LE_BLUETOOTH_DEVICE_ADDRESS_DATA_TYPE));
		assertEquals("LE Bluetooth Device Address", DATA_TYPE_MAPPING.get(LE_BLUETOOTH_DEVICE_ADDRESS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LE_ROLE_DATA_TYPE));
		assertEquals("LE Role", DATA_TYPE_MAPPING.get(LE_ROLE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SIMPLE_PAIRING_HASH_C_256_DATA_TYPE));
		assertEquals("Simple Pairing Hash C-256", DATA_TYPE_MAPPING.get(SIMPLE_PAIRING_HASH_C_256_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SIMPLE_PAIRING_RANDOMIZER_R_256_DATA_TYPE));
		assertEquals("Simple Pairing Randomizer R-256",
				DATA_TYPE_MAPPING.get(SIMPLE_PAIRING_RANDOMIZER_R_256_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LIST_OF_32_BIT_SERVICE_SOLICITATION_UUIDS_DATA_TYPE));
		assertEquals("List of 32-bit Service Solicitation UUIDs",
				DATA_TYPE_MAPPING.get(LIST_OF_32_BIT_SERVICE_SOLICITATION_UUIDS_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SERVICE_DATA_32_BIT_UUID_DATA_TYPE));
		assertEquals("Service Data - 32-bit UUID", DATA_TYPE_MAPPING.get(SERVICE_DATA_32_BIT_UUID_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(SERVICE_DATA_128_BIT_UUID_DATA_TYPE));
		assertEquals("Service Data - 128-bit UUID", DATA_TYPE_MAPPING.get(SERVICE_DATA_128_BIT_UUID_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE_DATA_TYPE));
		assertEquals("LE Secure Connections Confirmation Value",
				DATA_TYPE_MAPPING.get(LE_SECURE_CONNECTIONS_CONFIRMATION_VALUE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LE_SECURE_CONNECTIONS_RANDOM_VALUE_DATA_TYPE));
		assertEquals("LE Secure Connections Random Value",
				DATA_TYPE_MAPPING.get(LE_SECURE_CONNECTIONS_RANDOM_VALUE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(URI_DATA_TYPE));
		assertEquals("URI", DATA_TYPE_MAPPING.get(URI_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(INDOOR_POSITIONING_DATA_TYPE));
		assertEquals("Indoor Positioning", DATA_TYPE_MAPPING.get(INDOOR_POSITIONING_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(TRANSPORT_DISCOVERY_DATA_DATA_TYPE));
		assertEquals("Transport Discovery Data", DATA_TYPE_MAPPING.get(TRANSPORT_DISCOVERY_DATA_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(LE_SUPPORTED_FEATURES_DATA_TYPE));
		assertEquals("LE Supported Features", DATA_TYPE_MAPPING.get(LE_SUPPORTED_FEATURES_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(CHANNEL_MAP_UPDATE_INDICATION_DATA_TYPE));
		assertEquals("Channel Map Update Indication", DATA_TYPE_MAPPING.get(CHANNEL_MAP_UPDATE_INDICATION_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(PB_ADV_DATA_TYPE));
		assertEquals("PB-ADV", DATA_TYPE_MAPPING.get(PB_ADV_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(MESH_MESSAGE_DATA_TYPE));
		assertEquals("Mesh Message", DATA_TYPE_MAPPING.get(MESH_MESSAGE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(MESH_BEACON_DATA_TYPE));
		assertEquals("Mesh Beacon", DATA_TYPE_MAPPING.get(MESH_BEACON_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(BIG_INFO_DATA_TYPE));
		assertEquals("BIGInfo", DATA_TYPE_MAPPING.get(BIG_INFO_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(BROADCAST_CODE_DATA_TYPE));
		assertEquals("Broadcast_Code", DATA_TYPE_MAPPING.get(BROADCAST_CODE_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(RESOLVABLE_SET_IDENTIFIER_DATA_TYPE));
		assertEquals("Resolvable Set Identifier", DATA_TYPE_MAPPING.get(RESOLVABLE_SET_IDENTIFIER_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(ADVERTISING_INTERVAL_LONG_DATA_TYPE));
		assertEquals("Advertising Interval - long", DATA_TYPE_MAPPING.get(ADVERTISING_INTERVAL_LONG_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(BROADCAST_NAME_DATA_TYPE));
		assertEquals("Broadcast_Name", DATA_TYPE_MAPPING.get(BROADCAST_NAME_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(ENCRYPTED_ADVERTISING_DATA_DATA_TYPE));
		assertEquals("Encrypted Advertising Data", DATA_TYPE_MAPPING.get(ENCRYPTED_ADVERTISING_DATA_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(PERIODIC_ADVERTISING_RESPONSE_TIMING_INFORMATION_DATA_TYPE));
		assertEquals("Periodic Advertising Response Timing Information",
				DATA_TYPE_MAPPING.get(PERIODIC_ADVERTISING_RESPONSE_TIMING_INFORMATION_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(ELECTRONIC_SHELF_LABEL_DATA_TYPE));
		assertEquals("Electronic Shelf Label", DATA_TYPE_MAPPING.get(ELECTRONIC_SHELF_LABEL_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(THREE_D_INFORMATION_DATA_DATA_TYPE));
		assertEquals("3D Information Data", DATA_TYPE_MAPPING.get(THREE_D_INFORMATION_DATA_DATA_TYPE));
		assertTrue(DATA_TYPE_MAPPING.containsKey(MANUFACTURER_SPECIFIC_DATA_DATA_TYPE));
		assertEquals("Manufacturer Specific Data", DATA_TYPE_MAPPING.get(MANUFACTURER_SPECIFIC_DATA_DATA_TYPE));
	}
}