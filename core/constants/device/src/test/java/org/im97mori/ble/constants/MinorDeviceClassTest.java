package org.im97mori.ble.constants;

import static org.im97mori.ble.constants.MinorDeviceClass.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.im97mori.ble.test.TestBase;
import org.junit.Test;

public class MinorDeviceClassTest extends TestBase {

	@Test
	public void test_map_00001() {
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code for device not assigned", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_DESKTOP_WORKSTATION_MINOR_DEVICE_CLASS));
		assertEquals("Desktop workstation", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_DESKTOP_WORKSTATION_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_SERVER_CLASS_COMPUTER_MINOR_DEVICE_CLASS));
		assertEquals("Server-class computer", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_SERVER_CLASS_COMPUTER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_LAPTOP_MINOR_DEVICE_CLASS));
		assertEquals("Laptop", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_LAPTOP_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_HANDHELD_PC_PDA_MINOR_DEVICE_CLASS));
		assertEquals("Handheld PC/PDA (clamshell)", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_HANDHELD_PC_PDA_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_PALM_SIZE_PC_PDA_MINOR_DEVICE_CLASS));
		assertEquals("Palm-size PC/PDA", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_PALM_SIZE_PC_PDA_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_WEARABLE_COMPUTER_MINOR_DEVICE_CLASS));
		assertEquals("Wearable computer (watch size)", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_WEARABLE_COMPUTER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(COMPUTER_TABLET_MINOR_DEVICE_CLASS));
		assertEquals("Tablet", MINOR_DEVICE_CLASS_MAPPING.get(COMPUTER_TABLET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PHONE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code for device not assigned", MINOR_DEVICE_CLASS_MAPPING.get(PHONE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PHONE_CELLULAR_MINOR_DEVICE_CLASS));
		assertEquals("Cellular", MINOR_DEVICE_CLASS_MAPPING.get(PHONE_CELLULAR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PHONE_CORDLESS_MINOR_DEVICE_CLASS));
		assertEquals("Cordless", MINOR_DEVICE_CLASS_MAPPING.get(PHONE_CORDLESS_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PHONE_SMARTPHONE_MINOR_DEVICE_CLASS));
		assertEquals("Smartphone", MINOR_DEVICE_CLASS_MAPPING.get(PHONE_SMARTPHONE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PHONE_WIRED_MODEM_OR_VOICE_GATEWAY_MINOR_DEVICE_CLASS));
		assertEquals("Wired modem or voice gateway", MINOR_DEVICE_CLASS_MAPPING.get(PHONE_WIRED_MODEM_OR_VOICE_GATEWAY_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PHONE_COMMON_ISDN_ACCESS_MINOR_DEVICE_CLASS));
		assertEquals("Common ISDN access", MINOR_DEVICE_CLASS_MAPPING.get(PHONE_COMMON_ISDN_ACCESS_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_FULLYAVAILABLE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Fully available : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_FULLYAVAILABLE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_ONE_PERCENT_TO_SEVENTEEN_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("1% to 17% utilized : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_ONE_PERCENT_TO_SEVENTEEN_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_SEVENTEEN_PERCENT_TO_THIRTY_THREE_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("17% to 33% utilized : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_SEVENTEEN_PERCENT_TO_THIRTY_THREE_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_THIRTY_THREE_PERCENT_TO_FIFTY_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("33% to 50% utilized : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_THIRTY_THREE_PERCENT_TO_FIFTY_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_FIFTY_PERCENT_TO_SIXTY_SEVEN_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("50% to 67% utilized : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_FIFTY_PERCENT_TO_SIXTY_SEVEN_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_SIXTY_SEVEN_PERCENT_TO_EIGHTY_THREE_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("67% to 83% utilized : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_SIXTY_SEVEN_PERCENT_TO_EIGHTY_THREE_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_EIGHTY_THREE_PERCENT_TO_NINETY_NINE_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("83% to 99% utilized : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_EIGHTY_THREE_PERCENT_TO_NINETY_NINE_PERCENT_UTILIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(LAN_NETWORK_ACCESS_POINT_NO_SERVICE_AVAILABLE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("No service available : Uncategorized (use this value if no others apply)", MINOR_DEVICE_CLASS_MAPPING.get(LAN_NETWORK_ACCESS_POINT_NO_SERVICE_AVAILABLE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_WEARABLE_HEADSET_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Wearable Headset Device", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_WEARABLE_HEADSET_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_HANDS_FREE_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Hands-free Device", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_HANDS_FREE_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_RESERVED1036_MINOR_DEVICE_CLASS));
		assertEquals("(Reserved)", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_RESERVED1036_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_MICROPHONE_MINOR_DEVICE_CLASS));
		assertEquals("Microphone", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_MICROPHONE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_LOUDSPEAKER_MINOR_DEVICE_CLASS));
		assertEquals("Loudspeaker", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_LOUDSPEAKER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_HEADPHONES_MINOR_DEVICE_CLASS));
		assertEquals("Headphones", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_HEADPHONES_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_PORTABLE_AUDIO_MINOR_DEVICE_CLASS));
		assertEquals("Portable Audio", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_PORTABLE_AUDIO_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_CAR_AUDIO_MINOR_DEVICE_CLASS));
		assertEquals("Car Audio", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_CAR_AUDIO_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_SET_TOP_BOX_MINOR_DEVICE_CLASS));
		assertEquals("Set-top box", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_SET_TOP_BOX_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_HI_FI_AUDIO_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("HiFi Audio Device", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_HI_FI_AUDIO_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_VCR_MINOR_DEVICE_CLASS));
		assertEquals("VCR", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_VCR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_VIDEO_CAMERA_MINOR_DEVICE_CLASS));
		assertEquals("Video Camera", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_VIDEO_CAMERA_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_CAMCORDER_MINOR_DEVICE_CLASS));
		assertEquals("Camcorder", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_CAMCORDER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_VIDEO_MONITOR_MINOR_DEVICE_CLASS));
		assertEquals("Video Monitor", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_VIDEO_MONITOR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER_MINOR_DEVICE_CLASS));
		assertEquals("Video Display and Loudspeaker", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_VIDEO_CONFERENCING_MINOR_DEVICE_CLASS));
		assertEquals("Video Conferencing", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_VIDEO_CONFERENCING_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_RESERVED1092_MINOR_DEVICE_CLASS));
		assertEquals("(Reserved)", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_RESERVED1092_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(AUDIO_VIDEO_GAMING_TOY_MINOR_DEVICE_CLASS));
		assertEquals("Gaming/Toy", MINOR_DEVICE_CLASS_MAPPING.get(AUDIO_VIDEO_GAMING_TOY_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Uncategorized, code not assigned", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_JOYSTICK_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Joystick", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_JOYSTICK_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_GAMEPAD_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Gamepad", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_GAMEPAD_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Remote control", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Sensing device", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Digitizer tablet", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_CARD_READER_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Card Reader (e.g. SIM Card Reader)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_CARD_READER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Digital Pen", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Handheld scanner for barcodes, RFID, etc.", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_UNCATEGORIZED_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Uncategorized, code not assigned : Handheld gestural input device (e.g., “wand” form factor)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_UNCATEGORIZED_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Uncategorized, code not assigned", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_JOYSTICK_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Joystick", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_JOYSTICK_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_GAMEPAD_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Gamepad", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_GAMEPAD_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Remote control", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Sensing device", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Digitizer tablet", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_CARD_READER_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Card Reader (e.g. SIM Card Reader)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_CARD_READER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Digital Pen", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Handheld scanner for barcodes, RFID, etc.", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_KEYBOARD_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Keyboard : Handheld gestural input device (e.g., “wand” form factor)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_KEYBOARD_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Uncategorized, code not assigned", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_JOYSTICK_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Joystick", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_JOYSTICK_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_GAMEPAD_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Gamepad", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_GAMEPAD_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Remote control", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Sensing device", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Digitizer tablet", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_CARD_READER_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Card Reader (e.g. SIM Card Reader)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_CARD_READER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Digital Pen", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Handheld scanner for barcodes, RFID, etc.", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_POINTING_DEVICE_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Pointing device : Handheld gestural input device (e.g., “wand” form factor)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_POINTING_DEVICE_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Uncategorized, code not assigned", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_JOYSTICK_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Joystick", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_JOYSTICK_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_GAMEPAD_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Gamepad", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_GAMEPAD_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Remote control", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_REMOTE_CONTROL_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Sensing device", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_SENSING_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Digitizer tablet", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_DIGITIZER_TABLET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_CARD_READER_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Card Reader (e.g. SIM Card Reader)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_CARD_READER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Digital Pen", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_DIGITAL_PEN_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Handheld scanner for barcodes, RFID, etc.", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_HANDHELD_SCANNER_FOR_BARCODES_RFID_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Combo Keyboard/Pointing device : Handheld gestural input device (e.g., “wand” form factor)", MINOR_DEVICE_CLASS_MAPPING.get(PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE_HANDHELD_GESTURAL_INPUT_DEVICE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(IMAGING_DISPLAY_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Display : Uncategorized, default", MINOR_DEVICE_CLASS_MAPPING.get(IMAGING_DISPLAY_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(IMAGING_CAMERA_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Camera : Uncategorized, default", MINOR_DEVICE_CLASS_MAPPING.get(IMAGING_CAMERA_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(IMAGING_SCANNER_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Scanner : Uncategorized, default", MINOR_DEVICE_CLASS_MAPPING.get(IMAGING_SCANNER_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(IMAGING_PRINTER_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertEquals("Printer : Uncategorized, default", MINOR_DEVICE_CLASS_MAPPING.get(IMAGING_PRINTER_UNCATEGORIZED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(WEARABLE_WRISTWATCH_MINOR_DEVICE_CLASS));
		assertEquals("Wristwatch", MINOR_DEVICE_CLASS_MAPPING.get(WEARABLE_WRISTWATCH_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(WEARABLE_PAGER_MINOR_DEVICE_CLASS));
		assertEquals("Pager", MINOR_DEVICE_CLASS_MAPPING.get(WEARABLE_PAGER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(WEARABLE_JACKET_MINOR_DEVICE_CLASS));
		assertEquals("Jacket", MINOR_DEVICE_CLASS_MAPPING.get(WEARABLE_JACKET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(WEARABLE_HELMET_MINOR_DEVICE_CLASS));
		assertEquals("Helmet", MINOR_DEVICE_CLASS_MAPPING.get(WEARABLE_HELMET_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(WEARABLE_GLASSES_MINOR_DEVICE_CLASS));
		assertEquals("Glasses", MINOR_DEVICE_CLASS_MAPPING.get(WEARABLE_GLASSES_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(TOY_ROBOT_MINOR_DEVICE_CLASS));
		assertEquals("Robot", MINOR_DEVICE_CLASS_MAPPING.get(TOY_ROBOT_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(TOY_VEHICLE_MINOR_DEVICE_CLASS));
		assertEquals("Vehicle", MINOR_DEVICE_CLASS_MAPPING.get(TOY_VEHICLE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(TOY_DOLL_ACTION_FIGURE_MINOR_DEVICE_CLASS));
		assertEquals("Doll/Action figure", MINOR_DEVICE_CLASS_MAPPING.get(TOY_DOLL_ACTION_FIGURE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(TOY_CONTROLLER_MINOR_DEVICE_CLASS));
		assertEquals("Controller", MINOR_DEVICE_CLASS_MAPPING.get(TOY_CONTROLLER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(TOY_GAME_MINOR_DEVICE_CLASS));
		assertEquals("Game", MINOR_DEVICE_CLASS_MAPPING.get(TOY_GAME_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_UNDEFINED_MINOR_DEVICE_CLASS));
		assertEquals("Undefined", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_UNDEFINED_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_BLOOD_PRESSURE_MONITOR_MINOR_DEVICE_CLASS));
		assertEquals("Blood Pressure Monitor", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_BLOOD_PRESSURE_MONITOR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_THERMOMETER_MINOR_DEVICE_CLASS));
		assertEquals("Thermometer", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_THERMOMETER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_WEIGHING_SCALE_MINOR_DEVICE_CLASS));
		assertEquals("Weighing Scale", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_WEIGHING_SCALE_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_GLUCOSE_METER_MINOR_DEVICE_CLASS));
		assertEquals("Glucose Meter", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_GLUCOSE_METER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_PULSE_OXIMETER_MINOR_DEVICE_CLASS));
		assertEquals("Pulse Oximeter", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_PULSE_OXIMETER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_HEART_PULSE_RATE_MONITOR_MINOR_DEVICE_CLASS));
		assertEquals("Heart/Pulse Rate Monitor", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_HEART_PULSE_RATE_MONITOR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_HEALTH_DATA_DISPLAY_MINOR_DEVICE_CLASS));
		assertEquals("Health Data Display", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_HEALTH_DATA_DISPLAY_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_STEP_COUNTER_MINOR_DEVICE_CLASS));
		assertEquals("Step Counter", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_STEP_COUNTER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_BODY_COMPOSITION_ANALYZER_MINOR_DEVICE_CLASS));
		assertEquals("Body Composition Analyzer", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_BODY_COMPOSITION_ANALYZER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_PEAK_FLOW_MONITOR_MINOR_DEVICE_CLASS));
		assertEquals("Peak Flow Monitor", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_PEAK_FLOW_MONITOR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_MEDICATION_MONITOR_MINOR_DEVICE_CLASS));
		assertEquals("Medication Monitor", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_MEDICATION_MONITOR_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_KNEE_PROSTHESIS_MINOR_DEVICE_CLASS));
		assertEquals("Knee Prosthesis", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_KNEE_PROSTHESIS_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_ANKLE_PROSTHESIS_MINOR_DEVICE_CLASS));
		assertEquals("Ankle Prosthesis", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_ANKLE_PROSTHESIS_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_GENERIC_HEALTH_MANAGER_MINOR_DEVICE_CLASS));
		assertEquals("Generic Health Manager", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_GENERIC_HEALTH_MANAGER_MINOR_DEVICE_CLASS));
		assertTrue(MINOR_DEVICE_CLASS_MAPPING.containsKey(HEALTH_PERSONAL_MOBILITY_DEVICE_MINOR_DEVICE_CLASS));
		assertEquals("Personal Mobility Device", MINOR_DEVICE_CLASS_MAPPING.get(HEALTH_PERSONAL_MOBILITY_DEVICE_MINOR_DEVICE_CLASS));
		}
}