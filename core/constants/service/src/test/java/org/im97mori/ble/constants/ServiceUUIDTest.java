package org.im97mori.ble.constants;

import static org.im97mori.ble.constants.ServiceUUID.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class ServiceUUIDTest {

	@Test
	public void test_map_00001() {
		assertTrue(SERVICE_MAPPING_128.containsKey(GENERIC_ACCESS_SERVICE));
		assertEquals("Generic Access", SERVICE_MAPPING_128.get(GENERIC_ACCESS_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(GENERIC_ATTRIBUTE_SERVICE));
		assertEquals("Generic Attribute", SERVICE_MAPPING_128.get(GENERIC_ATTRIBUTE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(IMMEDIATE_ALERT_SERVICE));
		assertEquals("Immediate Alert", SERVICE_MAPPING_128.get(IMMEDIATE_ALERT_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(LINK_LOSS_SERVICE));
		assertEquals("Link Loss", SERVICE_MAPPING_128.get(LINK_LOSS_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(TX_POWER_SERVICE));
		assertEquals("Tx Power", SERVICE_MAPPING_128.get(TX_POWER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(CURRENT_TIME_SERVICE));
		assertEquals("Current Time", SERVICE_MAPPING_128.get(CURRENT_TIME_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(REFERENCE_TIME_UPDATE_SERVICE));
		assertEquals("Reference Time Update", SERVICE_MAPPING_128.get(REFERENCE_TIME_UPDATE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(NEXT_DST_CHANGE_SERVICE));
		assertEquals("Next DST Change", SERVICE_MAPPING_128.get(NEXT_DST_CHANGE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(GLUCOSE_SERVICE));
		assertEquals("Glucose", SERVICE_MAPPING_128.get(GLUCOSE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(HEALTH_THERMOMETER_SERVICE));
		assertEquals("Health Thermometer", SERVICE_MAPPING_128.get(HEALTH_THERMOMETER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(DEVICE_INFORMATION_SERVICE));
		assertEquals("Device Information", SERVICE_MAPPING_128.get(DEVICE_INFORMATION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(HEART_RATE_SERVICE));
		assertEquals("Heart Rate", SERVICE_MAPPING_128.get(HEART_RATE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(PHONE_ALERT_STATUS_SERVICE));
		assertEquals("Phone Alert Status", SERVICE_MAPPING_128.get(PHONE_ALERT_STATUS_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BATTERY_SERVICE));
		assertEquals("Battery", SERVICE_MAPPING_128.get(BATTERY_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BLOOD_PRESSURE_SERVICE));
		assertEquals("Blood Pressure", SERVICE_MAPPING_128.get(BLOOD_PRESSURE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(ALERT_NOTIFICATION_SERVICE));
		assertEquals("Alert Notification", SERVICE_MAPPING_128.get(ALERT_NOTIFICATION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(HUMAN_INTERFACE_DEVICE_SERVICE));
		assertEquals("Human Interface Device", SERVICE_MAPPING_128.get(HUMAN_INTERFACE_DEVICE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(SCAN_PARAMETERS_SERVICE));
		assertEquals("Scan Parameters", SERVICE_MAPPING_128.get(SCAN_PARAMETERS_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(RUNNING_SPEED_AND_CADENCE_SERVICE));
		assertEquals("Running Speed and Cadence", SERVICE_MAPPING_128.get(RUNNING_SPEED_AND_CADENCE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(AUTOMATION_IO_SERVICE));
		assertEquals("Automation IO", SERVICE_MAPPING_128.get(AUTOMATION_IO_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(CYCLING_SPEED_AND_CADENCE_SERVICE));
		assertEquals("Cycling Speed and Cadence", SERVICE_MAPPING_128.get(CYCLING_SPEED_AND_CADENCE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(CYCLING_POWER_SERVICE));
		assertEquals("Cycling Power", SERVICE_MAPPING_128.get(CYCLING_POWER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(LOCATION_AND_NAVIGATION_SERVICE));
		assertEquals("Location and Navigation", SERVICE_MAPPING_128.get(LOCATION_AND_NAVIGATION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(ENVIRONMENTAL_SENSING_SERVICE));
		assertEquals("Environmental Sensing", SERVICE_MAPPING_128.get(ENVIRONMENTAL_SENSING_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BODY_COMPOSITION_SERVICE));
		assertEquals("Body Composition", SERVICE_MAPPING_128.get(BODY_COMPOSITION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(USER_DATA_SERVICE));
		assertEquals("User Data", SERVICE_MAPPING_128.get(USER_DATA_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(WEIGHT_SCALE_SERVICE));
		assertEquals("Weight Scale", SERVICE_MAPPING_128.get(WEIGHT_SCALE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BOND_MANAGEMENT_SERVICE));
		assertEquals("Bond Management", SERVICE_MAPPING_128.get(BOND_MANAGEMENT_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(CONTINUOUS_GLUCOSE_MONITORING_SERVICE));
		assertEquals("Continuous Glucose Monitoring", SERVICE_MAPPING_128.get(CONTINUOUS_GLUCOSE_MONITORING_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(INTERNET_PROTOCOL_SUPPORT_SERVICE));
		assertEquals("Internet Protocol Support", SERVICE_MAPPING_128.get(INTERNET_PROTOCOL_SUPPORT_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(INDOOR_POSITIONING_SERVICE));
		assertEquals("Indoor Positioning", SERVICE_MAPPING_128.get(INDOOR_POSITIONING_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(PULSE_OXIMETER_SERVICE));
		assertEquals("Pulse Oximeter", SERVICE_MAPPING_128.get(PULSE_OXIMETER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(HTTP_PROXY_SERVICE));
		assertEquals("HTTP Proxy", SERVICE_MAPPING_128.get(HTTP_PROXY_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(TRANSPORT_DISCOVERY_SERVICE));
		assertEquals("Transport Discovery", SERVICE_MAPPING_128.get(TRANSPORT_DISCOVERY_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(OBJECT_TRANSFER_SERVICE));
		assertEquals("Object Transfer", SERVICE_MAPPING_128.get(OBJECT_TRANSFER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(FITNESS_MACHINE_SERVICE));
		assertEquals("Fitness Machine", SERVICE_MAPPING_128.get(FITNESS_MACHINE_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(MESH_PROVISIONING_SERVICE));
		assertEquals("Mesh Provisioning", SERVICE_MAPPING_128.get(MESH_PROVISIONING_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(MESH_PROXY_SERVICE));
		assertEquals("Mesh Proxy", SERVICE_MAPPING_128.get(MESH_PROXY_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(RECONNECTION_CONFIGURATION_SERVICE));
		assertEquals("Reconnection Configuration", SERVICE_MAPPING_128.get(RECONNECTION_CONFIGURATION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(INSULIN_DELIVERY_SERVICE));
		assertEquals("Insulin Delivery", SERVICE_MAPPING_128.get(INSULIN_DELIVERY_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BINARY_SENSOR_SERVICE));
		assertEquals("Binary Sensor", SERVICE_MAPPING_128.get(BINARY_SENSOR_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(EMERGENCY_CONFIGURATION_SERVICE));
		assertEquals("Emergency Configuration", SERVICE_MAPPING_128.get(EMERGENCY_CONFIGURATION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(AUTHORIZATION_CONTROL_SERVICE));
		assertEquals("Authorization Control", SERVICE_MAPPING_128.get(AUTHORIZATION_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(PHYSICAL_ACTIVITY_MONITOR_SERVICE));
		assertEquals("Physical Activity Monitor", SERVICE_MAPPING_128.get(PHYSICAL_ACTIVITY_MONITOR_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(AUDIO_INPUT_CONTROL_SERVICE));
		assertEquals("Audio Input Control", SERVICE_MAPPING_128.get(AUDIO_INPUT_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(VOLUME_CONTROL_SERVICE));
		assertEquals("Volume Control", SERVICE_MAPPING_128.get(VOLUME_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(VOLUME_OFFSET_CONTROL_SERVICE));
		assertEquals("Volume Offset Control", SERVICE_MAPPING_128.get(VOLUME_OFFSET_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(COORDINATED_SET_IDENTIFICATION_SERVICE));
		assertEquals("Coordinated Set Identification", SERVICE_MAPPING_128.get(COORDINATED_SET_IDENTIFICATION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(DEVICE_TIME_SERVICE));
		assertEquals("Device Time", SERVICE_MAPPING_128.get(DEVICE_TIME_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(MEDIA_CONTROL_SERVICE));
		assertEquals("Media Control", SERVICE_MAPPING_128.get(MEDIA_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(GENERIC_MEDIA_CONTROL_SERVICE));
		assertEquals("Generic Media Control", SERVICE_MAPPING_128.get(GENERIC_MEDIA_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(CONSTANT_TONE_EXTENSION_SERVICE));
		assertEquals("Constant Tone Extension", SERVICE_MAPPING_128.get(CONSTANT_TONE_EXTENSION_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(TELEPHONE_BEARER_SERVICE));
		assertEquals("Telephone Bearer", SERVICE_MAPPING_128.get(TELEPHONE_BEARER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(GENERIC_TELEPHONE_BEARER_SERVICE));
		assertEquals("Generic Telephone Bearer", SERVICE_MAPPING_128.get(GENERIC_TELEPHONE_BEARER_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(MICROPHONE_CONTROL_SERVICE));
		assertEquals("Microphone Control", SERVICE_MAPPING_128.get(MICROPHONE_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(AUDIO_STREAM_CONTROL_SERVICE));
		assertEquals("Audio Stream Control", SERVICE_MAPPING_128.get(AUDIO_STREAM_CONTROL_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BROADCAST_AUDIO_SCAN_SERVICE));
		assertEquals("Broadcast Audio Scan", SERVICE_MAPPING_128.get(BROADCAST_AUDIO_SCAN_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(PUBLISHED_AUDIO_CAPABILITIES_SERVICE));
		assertEquals("Published Audio Capabilities", SERVICE_MAPPING_128.get(PUBLISHED_AUDIO_CAPABILITIES_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BASIC_AUDIO_ANNOUNCEMENT_SERVICE));
		assertEquals("Basic Audio Announcement", SERVICE_MAPPING_128.get(BASIC_AUDIO_ANNOUNCEMENT_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(BROADCAST_AUDIO_ANNOUNCEMENT_SERVICE));
		assertEquals("Broadcast Audio Announcement", SERVICE_MAPPING_128.get(BROADCAST_AUDIO_ANNOUNCEMENT_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(COMMON_AUDIO_SERVICE));
		assertEquals("Common Audio", SERVICE_MAPPING_128.get(COMMON_AUDIO_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(HEARING_ACCESS_SERVICE));
		assertEquals("Hearing Access", SERVICE_MAPPING_128.get(HEARING_ACCESS_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(TELEPHONY_AND_MEDIA_AUDIO_SERVICE));
		assertEquals("Telephony and Media Audio", SERVICE_MAPPING_128.get(TELEPHONY_AND_MEDIA_AUDIO_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(PUBLIC_BROADCAST_ANNOUNCEMENT_SERVICE));
		assertEquals("Public Broadcast Announcement", SERVICE_MAPPING_128.get(PUBLIC_BROADCAST_ANNOUNCEMENT_SERVICE));
		assertTrue(SERVICE_MAPPING_128.containsKey(ELECTRONIC_SHELF_LABEL_SERVICE));
		assertEquals("Electronic Shelf Label", SERVICE_MAPPING_128.get(ELECTRONIC_SHELF_LABEL_SERVICE));
	}

}